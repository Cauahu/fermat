!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_CENTER	src/fermat/common/format.h	/^    ALIGN_CENTER, $/;"	e	enum:fermat::Alignment
ALIGN_DEFAULT	src/fermat/common/format.h	/^    ALIGN_DEFAULT, $/;"	e	enum:fermat::Alignment
ALIGN_LEFT	src/fermat/common/format.h	/^    ALIGN_LEFT, $/;"	e	enum:fermat::Alignment
ALIGN_NUMERIC	src/fermat/common/format.h	/^    ALIGN_NUMERIC$/;"	e	enum:fermat::Alignment
ALIGN_RIGHT	src/fermat/common/format.h	/^    ALIGN_RIGHT, $/;"	e	enum:fermat::Alignment
ALLOW_HEX	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_HEX = 1,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_LEADING_SPACES	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_LEADING_SPACES = 8,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_OCTALS	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_OCTALS = 2,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_SPACES_AFTER_SIGN	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_SPACES_AFTER_SIGN = 32$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_TRAILING_JUNK	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_TRAILING_JUNK = 4,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ALLOW_TRAILING_SPACES	src/fermat/common/double-conversion/double-conversion.h	/^    ALLOW_TRAILING_SPACES = 16,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
ARRAY_SIZE	src/fermat/common/double-conversion/utils.h	132;"	d
ASSERT	src/fermat/common/double-conversion/utils.h	36;"	d
AddBignum	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AddBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AddCharacter	src/fermat/common/double-conversion/utils.h	/^  void AddCharacter(char c) {$/;"	f	class:double_conversion::StringBuilder
AddPadding	src/fermat/common/double-conversion/utils.h	/^  void AddPadding(char c, int count) {$/;"	f	class:double_conversion::StringBuilder
AddString	src/fermat/common/double-conversion/utils.h	/^  void AddString(const char* s) {$/;"	f	class:double_conversion::StringBuilder
AddSubstring	src/fermat/common/double-conversion/utils.h	/^  void AddSubstring(const char* s, int n) {$/;"	f	class:double_conversion::StringBuilder
AddUInt64	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AddUInt64(uint64_t operand) {$/;"	f	class:double_conversion::Bignum
AdjustmentPowerOfTen	src/fermat/common/double-conversion/strtod.cc	/^static DiyFp AdjustmentPowerOfTen(int exponent) {$/;"	f	namespace:double_conversion
AdvanceToNonspace	src/fermat/common/double-conversion/double-conversion.cc	/^static inline bool AdvanceToNonspace(Iterator* current, Iterator end) {$/;"	f	namespace:double_conversion
Align	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::Align(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AlignSpec	src/fermat/common/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fermat::AlignSpec
AlignSpec	src/fermat/common/format.h	/^struct AlignSpec: WidthSpec$/;"	s	namespace:fermat
AlignTypeSpec	src/fermat/common/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill): AlignSpec(width, fill)$/;"	f	struct:fermat::AlignTypeSpec
AlignTypeSpec	src/fermat/common/format.h	/^struct AlignTypeSpec: AlignSpec$/;"	s	namespace:fermat
Alignment	src/fermat/common/format.h	/^enum Alignment$/;"	g	namespace:fermat
Arg	src/fermat/common/format.h	/^struct Arg: Value$/;"	s	namespace:fermat::internal
ArgArray	src/fermat/common/format.h	/^struct ArgArray<N, false\/*IsPacked*\/> {$/;"	s	namespace:fermat
ArgConverter	src/fermat/common/format_in.h	/^    ArgConverter(fermat::internal::Arg &arg, wchar_t type)$/;"	f	class:fermat::__anon29::ArgConverter
ArgConverter	src/fermat/common/format_in.h	/^class ArgConverter: public fermat::internal::ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fermat::__anon29
ArgFormatterBase	src/fermat/common/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fermat::internal::ArgFormatterBase
ArgFormatterBase	src/fermat/common/format.h	/^class ArgFormatterBase: public ArgVisitor<Impl, void> {$/;"	c	namespace:fermat::internal
ArgList	src/fermat/common/format.h	/^    ArgList(): _types(0)$/;"	f	class:fermat::ArgList
ArgList	src/fermat/common/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fermat::ArgList
ArgList	src/fermat/common/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fermat::ArgList
ArgList	src/fermat/common/format.h	/^class ArgList {$/;"	c	namespace:fermat
ArgMap	src/fermat/common/format.h	/^class ArgMap {$/;"	c	namespace:fermat::internal
ArgType	src/fermat/common/format.h	/^    ArgType(): type(0)$/;"	f	struct:fermat::ArgType
ArgType	src/fermat/common/format.h	/^    ArgType(const T &arg) : type(make_type(arg))$/;"	f	struct:fermat::ArgType
ArgType	src/fermat/common/format.h	/^struct ArgType {$/;"	s	namespace:fermat
ArgVisitor	src/fermat/common/format.h	/^class ArgVisitor {$/;"	c	namespace:fermat::internal
ArrayWriter	src/fermat/common/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
AsDiyFp	src/fermat/common/double-conversion/ieee.h	/^  DiyFp AsDiyFp() const {$/;"	f	class:double_conversion::Double
AsDiyFp	src/fermat/common/double-conversion/ieee.h	/^  DiyFp AsDiyFp() const {$/;"	f	class:double_conversion::Single
AsNormalizedDiyFp	src/fermat/common/double-conversion/ieee.h	/^  DiyFp AsNormalizedDiyFp() const {$/;"	f	class:double_conversion::Double
AsUint32	src/fermat/common/double-conversion/ieee.h	/^  uint32_t AsUint32() const {$/;"	f	class:double_conversion::Single
AsUint64	src/fermat/common/double-conversion/ieee.h	/^  uint64_t AsUint64() const {$/;"	f	class:double_conversion::Double
Ascii	src/fermat/common/ascii.h	/^class Ascii {$/;"	c	class:fermat::AsciiType
AsciiType	src/fermat/common/ascii.h	/^enum class AsciiType {$/;"	c	namespace:fermat
AssignBignum	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
AssignDecimalString	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignDecimalString(Vector<const char> value) {$/;"	f	class:double_conversion::Bignum
AssignHexString	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignHexString(Vector<const char> value) {$/;"	f	class:double_conversion::Bignum
AssignPowerUInt16	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignPowerUInt16(uint16_t base, int power_exponent) {$/;"	f	class:double_conversion::Bignum
AssignUInt16	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignUInt16(uint16_t value) {$/;"	f	class:double_conversion::Bignum
AssignUInt64	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::AssignUInt64(uint64_t value) {$/;"	f	class:double_conversion::Bignum
BIGNUM_DTOA_FIXED	src/fermat/common/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_FIXED,$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_PRECISION	src/fermat/common/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_PRECISION$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_SHORTEST	src/fermat/common/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_SHORTEST,$/;"	e	enum:double_conversion::BignumDtoaMode
BIGNUM_DTOA_SHORTEST_SINGLE	src/fermat/common/double-conversion/bignum-dtoa.h	/^  BIGNUM_DTOA_SHORTEST_SINGLE,$/;"	e	enum:double_conversion::BignumDtoaMode
BLACK	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLUE	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BOOL	src/fermat/common/format.h	/^        BOOL, $/;"	e	enum:fermat::internal::Value::Type
BUFFER_SIZE	src/fermat/common/format.h	/^        BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3$/;"	e	enum:FormatInt::__anon28
Base	src/fermat/common/format_in.h	/^    typedef ArgFormatterBase<PrintfArgFormatter<Char>, Char> Base;$/;"	t	class:fermat::internal::PrintfArgFormatter
BasicArgFormatter	src/fermat/common/format.h	/^    BasicArgFormatter(BasicFormatter<Char> &f, FormatSpec &s, const Char *fmt)$/;"	f	class:fermat::internal::BasicArgFormatter
BasicArgFormatter	src/fermat/common/format.h	/^class BasicArgFormatter:$/;"	c	namespace:fermat::internal
BasicArrayWriter	src/fermat/common/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	src/fermat/common/format.h	/^class BasicArrayWriter: public BasicWriter<Char> {$/;"	c
BasicBuffer	src/fermat/common/basic_buffer.h	/^    BasicBuffer(T *ptr = 0, std::size_t capacitySize = 0)$/;"	f	class:fermat::BasicBuffer
BasicBuffer	src/fermat/common/basic_buffer.h	/^class BasicBuffer {$/;"	c	namespace:fermat
BasicCStringRef	src/fermat/common/string_ref.h	/^    BasicCStringRef(const Char *s): _data(s)$/;"	f	class:fermat::BasicCStringRef
BasicCStringRef	src/fermat/common/string_ref.h	/^    BasicCStringRef(const std::basic_string<Char> &s): _data(s.c_str())$/;"	f	class:fermat::BasicCStringRef
BasicCStringRef	src/fermat/common/string_ref.h	/^class BasicCStringRef {$/;"	c	namespace:fermat
BasicCharTraits	src/fermat/common/format.h	/^class BasicCharTraits {$/;"	c	namespace:fermat::internal
BasicFormatter	src/fermat/common/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fermat::BasicFormatter
BasicFormatter	src/fermat/common/format.h	/^class BasicFormatter: private internal::FormatterBase {$/;"	c	namespace:fermat
BasicMemoryWriter	src/fermat/common/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/fermat/common/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/fermat/common/format.h	/^class BasicMemoryWriter: public BasicWriter<Char>$/;"	c
BasicStringRef	src/fermat/common/string_ref.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fermat::BasicStringRef
BasicStringRef	src/fermat/common/string_ref.h	/^    BasicStringRef(const Char *str, std::size_t s) : _data(str), _size(s)$/;"	f	class:fermat::BasicStringRef
BasicStringRef	src/fermat/common/string_ref.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fermat::BasicStringRef
BasicStringRef	src/fermat/common/string_ref.h	/^class BasicStringRef {$/;"	c	namespace:fermat
BasicWriter	src/fermat/common/format.h	/^    explicit BasicWriter(BasicBuffer<Char> &b): _buffer(b)$/;"	f	class:BasicWriter
BasicWriter	src/fermat/common/format.h	/^class BasicWriter {$/;"	c
BiggestPowerTen	src/fermat/common/double-conversion/fast-dtoa.cc	/^static void BiggestPowerTen(uint32_t number,$/;"	f	namespace:double_conversion
BigitAt	src/fermat/common/double-conversion/bignum.cc	/^Bignum::Chunk Bignum::BigitAt(int index) const {$/;"	f	class:double_conversion::Bignum
BigitLength	src/fermat/common/double-conversion/bignum.h	/^  int BigitLength() const { return used_digits_ + exponent_; }$/;"	f	class:double_conversion::Bignum
BigitsShiftLeft	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::BigitsShiftLeft(int shift_amount) {$/;"	f	class:double_conversion::Bignum
Bignum	src/fermat/common/double-conversion/bignum.cc	/^Bignum::Bignum()$/;"	f	class:double_conversion::Bignum
Bignum	src/fermat/common/double-conversion/bignum.h	/^class Bignum {$/;"	c	namespace:double_conversion
BignumDtoa	src/fermat/common/double-conversion/bignum-dtoa.cc	/^void BignumDtoa(double v, BignumDtoaMode mode, int requested_digits,$/;"	f	namespace:double_conversion
BignumDtoaMode	src/fermat/common/double-conversion/bignum-dtoa.h	/^enum BignumDtoaMode {$/;"	g	namespace:double_conversion
BignumToFixed	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void BignumToFixed(int requested_digits, int* decimal_point,$/;"	f	namespace:double_conversion
BitAt	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  int BitAt(int position) const {$/;"	f	class:double_conversion::UInt128
BitCast	src/fermat/common/double-conversion/utils.h	/^inline Dest BitCast(Source* source) {$/;"	f	namespace:double_conversion
BitCast	src/fermat/common/double-conversion/utils.h	/^inline Dest BitCast(const Source& source) {$/;"	f	namespace:double_conversion
BitSize	src/fermat/common/double-conversion/bignum.cc	/^static int BitSize(S value) {$/;"	f	namespace:double_conversion
BoolFormat	src/fermat/common/numeric_formatter.h	/^enum class BoolFormat {$/;"	c	namespace:fermat
Buffer	src/fermat/common/log_async.h	/^    typedef StackBuffer<char, 4096>   Buffer; $/;"	t	class:fermat::LogAsync
Buffer	src/fermat/common/log_stream.h	/^    typedef StackBuffer<char, kBufferSize> Buffer;$/;"	t	class:fermat::LogStream
BufferPtr	src/fermat/common/log_async.h	/^    typedef std::shared_ptr<Buffer>   BufferPtr;$/;"	t	class:fermat::LogAsync
BufferVector	src/fermat/common/log_async.h	/^    typedef std::vector<BufferPtr>    BufferVector;   $/;"	t	class:fermat::LogAsync
CHAR	src/fermat/common/format.h	/^        CHAR, $/;"	e	enum:fermat::internal::Value::Type
CHAR_FLAG	src/fermat/common/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fermat::__anon27
CHECK_NOTNULL	src/fermat/common/logging.h	109;"	d
COMMON_SHARED_STATE_H_	src/fermat/common/shared_state.h	2;"	d
CSTRING	src/fermat/common/format.h	/^        CSTRING, $/;"	e	enum:fermat::internal::Value::Type
CStringRef	src/fermat/common/string_ref.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fermat
CUSTOM	src/fermat/common/format.h	/^        CUSTOM$/;"	e	enum:fermat::internal::Value::Type
CYAN	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
CachedPower	src/fermat/common/double-conversion/cached-powers.cc	/^struct CachedPower {$/;"	s	namespace:double_conversion	file:
Char	src/fermat/common/format.h	/^    typedef CharType Char;$/;"	t	class:fermat::BasicFormatter
Char	src/fermat/common/format.h	/^    typedef char Char;  \/\/ For FORMAT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	src/fermat/common/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fermat::internal::MakeValue
CharConverter	src/fermat/common/format_in.h	/^    explicit CharConverter(fermat::internal::Arg &arg): _arg(arg)$/;"	f	class:fermat::__anon29::CharConverter
CharConverter	src/fermat/common/format_in.h	/^class CharConverter: public fermat::internal::ArgVisitor<CharConverter, void>$/;"	c	namespace:fermat::__anon29
CharPtr	src/fermat/common/format.h	/^    typedef Char *CharPtr;$/;"	t	class:fermat::internal::BasicCharTraits
CharPtr	src/fermat/common/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharTraits	src/fermat/common/format.h	/^class CharTraits<char>: public BasicCharTraits<char>$/;"	c	namespace:fermat::internal
CharTraits	src/fermat/common/format.h	/^class CharTraits<wchar_t>: public BasicCharTraits<wchar_t>$/;"	c	namespace:fermat::internal
CheckNotNull	src/fermat/common/logging.h	/^T* CheckNotNull(Logging::SourceFile file, int line, const char *names, T* ptr) $/;"	f	namespace:fermat
Chunk	src/fermat/common/double-conversion/bignum.h	/^  typedef uint32_t Chunk;$/;"	t	class:double_conversion::Bignum
Clamp	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::Clamp() {$/;"	f	class:double_conversion::Bignum
Clock	src/fermat/common/clock.cc	/^Clock::Clock()$/;"	f	class:fermat::Clock
Clock	src/fermat/common/clock.cc	/^Clock::Clock(ClockVal tv)$/;"	f	class:fermat::Clock
Clock	src/fermat/common/clock.cc	/^Clock::Clock(const Clock& other)$/;"	f	class:fermat::Clock
Clock	src/fermat/common/clock.h	/^class Clock {$/;"	c	namespace:fermat
ClockDiff	src/fermat/common/clock.h	/^    typedef int64_t ClockDiff;$/;"	t	class:fermat::Clock
ClockVal	src/fermat/common/clock.h	/^    typedef int64_t ClockVal;$/;"	t	class:fermat::Clock
CmdParser	src/fermat/common/cmdline.h	/^    CmdParser()$/;"	f	class:fermat::CmdParser
CmdParser	src/fermat/common/cmdline.h	/^class CmdParser{$/;"	c	namespace:fermat
Color	src/fermat/common/format.h	/^enum Color {$/;"	g
Compare	src/fermat/common/double-conversion/bignum.cc	/^int Bignum::Compare(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
CompareBufferWithDiyFp	src/fermat/common/double-conversion/strtod.cc	/^static int CompareBufferWithDiyFp(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ComputeGuess	src/fermat/common/double-conversion/strtod.cc	/^static bool ComputeGuess(Vector<const char> trimmed, int exponent,$/;"	f	namespace:double_conversion
Cond	src/fermat/common/cond.cc	/^Cond::Cond()$/;"	f	class:fermat::Cond
Cond	src/fermat/common/cond.h	/^class Cond {$/;"	c	namespace:fermat
Conditional	src/fermat/common/format.h	/^struct Conditional {$/;"	s	namespace:fermat::internal
Conditional	src/fermat/common/format.h	/^struct Conditional<false, T, F> {$/;"	s	namespace:fermat::internal
ConsumeSubString	src/fermat/common/double-conversion/double-conversion.cc	/^static bool ConsumeSubString(Iterator* current,$/;"	f	namespace:double_conversion
ConvertToInt	src/fermat/common/format.h	/^struct ConvertToInt {$/;"	s	namespace:fermat::internal
ConvertToIntImpl	src/fermat/common/format.h	/^struct ConvertToIntImpl {$/;"	s	namespace:fermat::internal
ConvertToIntImpl	src/fermat/common/format.h	/^struct ConvertToIntImpl<T, true> {$/;"	s	namespace:fermat::internal
ConvertToIntImpl2	src/fermat/common/format.h	/^struct ConvertToIntImpl2 {$/;"	s	namespace:fermat::internal
ConvertToIntImpl2	src/fermat/common/format.h	/^struct ConvertToIntImpl2<T, true> {$/;"	s	namespace:fermat::internal
CreateDecimalRepresentation	src/fermat/common/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::CreateDecimalRepresentation($/;"	f	class:double_conversion::DoubleToStringConverter
CreateExponentialRepresentation	src/fermat/common/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::CreateExponentialRepresentation($/;"	f	class:double_conversion::DoubleToStringConverter
CustomValue	src/fermat/common/format.h	/^    struct CustomValue {$/;"	s	struct:fermat::internal::Value
CutToMaxSignificantDigits	src/fermat/common/double-conversion/strtod.cc	/^static void CutToMaxSignificantDigits(Vector<const char> buffer,$/;"	f	namespace:double_conversion
DIGITS	src/fermat/common/format_in.h	/^const char fermat::internal::BasicData<T>::DIGITS[] =$/;"	m	class:fermat::internal::BasicData
DISALLOW_COPY_AND_ASSIGN	src/fermat/common/double-conversion/utils.h	140;"	d
DISALLOW_IMPLICIT_CONSTRUCTORS	src/fermat/common/double-conversion/utils.h	152;"	d
DOUBLE	src/fermat/common/format.h	/^        DOUBLE, $/;"	e	enum:fermat::internal::Value::Type
DOUBLE_CONVERSION_BIGNUM_DTOA_H_	src/fermat/common/double-conversion/bignum-dtoa.h	29;"	d
DOUBLE_CONVERSION_BIGNUM_H_	src/fermat/common/double-conversion/bignum.h	29;"	d
DOUBLE_CONVERSION_CACHED_POWERS_H_	src/fermat/common/double-conversion/cached-powers.h	29;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	src/fermat/common/double-conversion/utils.h	81;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	src/fermat/common/double-conversion/utils.h	83;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	src/fermat/common/double-conversion/utils.h	87;"	d
DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS	src/fermat/common/double-conversion/utils.h	89;"	d
DOUBLE_CONVERSION_DIY_FP_H_	src/fermat/common/double-conversion/diy-fp.h	29;"	d
DOUBLE_CONVERSION_DOUBLE_CONVERSION_H_	src/fermat/common/double-conversion/double-conversion.h	29;"	d
DOUBLE_CONVERSION_DOUBLE_H_	src/fermat/common/double-conversion/ieee.h	29;"	d
DOUBLE_CONVERSION_FAST_DTOA_H_	src/fermat/common/double-conversion/fast-dtoa.h	29;"	d
DOUBLE_CONVERSION_FIXED_DTOA_H_	src/fermat/common/double-conversion/fixed-dtoa.h	29;"	d
DOUBLE_CONVERSION_NO_RETURN	src/fermat/common/double-conversion/utils.h	44;"	d
DOUBLE_CONVERSION_NO_RETURN	src/fermat/common/double-conversion/utils.h	46;"	d
DOUBLE_CONVERSION_STRTOD_H_	src/fermat/common/double-conversion/strtod.h	29;"	d
DOUBLE_CONVERSION_UNUSED	src/fermat/common/double-conversion/utils.h	96;"	d
DOUBLE_CONVERSION_UNUSED	src/fermat/common/double-conversion/utils.h	98;"	d
DOUBLE_CONVERSION_UTILS_H_	src/fermat/common/double-conversion/utils.h	29;"	d
DefaultOutPut	src/fermat/common/logging.cc	/^    DefaultOutPut():LogOutput("default_log_output") {}$/;"	f	class:fermat::DefaultOutPut
DefaultOutPut	src/fermat/common/logging.cc	/^class DefaultOutPut : public LogOutput {$/;"	c	namespace:fermat	file:
DigitGen	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool DigitGen(DiyFp low,$/;"	f	namespace:double_conversion
DigitGenCounted	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool DigitGenCounted(DiyFp w,$/;"	f	namespace:double_conversion
DivModPowerOf2	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  int DivModPowerOf2(int power) {$/;"	f	class:double_conversion::UInt128
DivideModuloIntBignum	src/fermat/common/double-conversion/bignum.cc	/^uint16_t Bignum::DivideModuloIntBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
DiyFp	src/fermat/common/double-conversion/diy-fp.h	/^  DiyFp() : f_(0), e_(0) {}$/;"	f	class:double_conversion::DiyFp
DiyFp	src/fermat/common/double-conversion/diy-fp.h	/^  DiyFp(uint64_t significand, int exponent) : f_(significand), e_(exponent) {}$/;"	f	class:double_conversion::DiyFp
DiyFp	src/fermat/common/double-conversion/diy-fp.h	/^class DiyFp {$/;"	c	namespace:double_conversion
DiyFpStrtod	src/fermat/common/double-conversion/strtod.cc	/^static bool DiyFpStrtod(Vector<const char> buffer,$/;"	f	namespace:double_conversion
DiyFpToUint64	src/fermat/common/double-conversion/ieee.h	/^  static uint64_t DiyFpToUint64(DiyFp diy_fp) {$/;"	f	class:double_conversion::Double
Double	src/fermat/common/double-conversion/ieee.h	/^  Double() : d64_(0) {}$/;"	f	class:double_conversion::Double
Double	src/fermat/common/double-conversion/ieee.h	/^  explicit Double(DiyFp diy_fp)$/;"	f	class:double_conversion::Double
Double	src/fermat/common/double-conversion/ieee.h	/^  explicit Double(double d) : d64_(double_to_uint64(d)) {}$/;"	f	class:double_conversion::Double
Double	src/fermat/common/double-conversion/ieee.h	/^  explicit Double(uint64_t d64) : d64_(d64) {}$/;"	f	class:double_conversion::Double
Double	src/fermat/common/double-conversion/ieee.h	/^class Double {$/;"	c	namespace:double_conversion
DoubleChunk	src/fermat/common/double-conversion/bignum.h	/^  typedef uint64_t DoubleChunk;$/;"	t	class:double_conversion::Bignum
DoubleStrtod	src/fermat/common/double-conversion/strtod.cc	/^static bool DoubleStrtod(Vector<const char> trimmed,$/;"	f	namespace:double_conversion
DoubleToAscii	src/fermat/common/double-conversion/double-conversion.cc	/^void DoubleToStringConverter::DoubleToAscii(double v,$/;"	f	class:double_conversion::DoubleToStringConverter
DoubleToStringConverter	src/fermat/common/double-conversion/double-conversion.h	/^  DoubleToStringConverter(int flags,$/;"	f	class:double_conversion::DoubleToStringConverter
DoubleToStringConverter	src/fermat/common/double-conversion/double-conversion.h	/^class DoubleToStringConverter {$/;"	c	namespace:double_conversion
DtoaMode	src/fermat/common/double-conversion/double-conversion.h	/^  enum DtoaMode {$/;"	g	class:double_conversion::DoubleToStringConverter
DtoaToBignumDtoaMode	src/fermat/common/double-conversion/double-conversion.cc	/^static BignumDtoaMode DtoaToBignumDtoaMode($/;"	f	namespace:double_conversion
DummyInt	src/fermat/common/format.h	/^struct DummyInt$/;"	s	namespace:fermat::internal
DummyStream	src/fermat/common/format.h	/^struct DummyStream: std::ostream {$/;"	s	namespace:fermat::internal
EMIT_POSITIVE_EXPONENT_SIGN	src/fermat/common/double-conversion/double-conversion.h	/^    EMIT_POSITIVE_EXPONENT_SIGN = 1,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
EMIT_TRAILING_DECIMAL_POINT	src/fermat/common/double-conversion/double-conversion.h	/^    EMIT_TRAILING_DECIMAL_POINT = 2,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
EMIT_TRAILING_ZERO_AFTER_POINT	src/fermat/common/double-conversion/double-conversion.h	/^    EMIT_TRAILING_ZERO_AFTER_POINT = 4,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
ERRORCHECK	src/fermat/common/mutex.h	/^    ERRORCHECK,          \/\/\/< check error$/;"	m	class:fermat::MutexType
EcmaScriptConverter	src/fermat/common/double-conversion/double-conversion.cc	/^const DoubleToStringConverter& DoubleToStringConverter::EcmaScriptConverter() {$/;"	f	class:double_conversion::DoubleToStringConverter
EmptySpec	src/fermat/common/format.h	/^struct EmptySpec$/;"	s	namespace:fermat
EnableIf	src/fermat/common/format.h	/^struct EnableIf$/;"	s	namespace:fermat::internal
EnableIf	src/fermat/common/format.h	/^struct EnableIf<true, T> {$/;"	s	namespace:fermat::internal
EnsureCapacity	src/fermat/common/double-conversion/bignum.h	/^  void EnsureCapacity(int size) {$/;"	f	class:double_conversion::Bignum
Environment	src/fermat/common/env.h	/^class  Environment {$/;"	c	namespace:fermat
Equal	src/fermat/common/double-conversion/bignum.h	/^  static bool Equal(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
EstimatePower	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static int EstimatePower(int exponent) {$/;"	f	namespace:double_conversion
Exponent	src/fermat/common/double-conversion/ieee.h	/^  int Exponent() const {$/;"	f	class:double_conversion::Double
Exponent	src/fermat/common/double-conversion/ieee.h	/^  int Exponent() const {$/;"	f	class:double_conversion::Single
FAST	src/fermat/common/mutex.h	/^    FAST,                \/\/\/< no operation$/;"	m	class:fermat::MutexType
FAST_DTOA_PRECISION	src/fermat/common/double-conversion/fast-dtoa.h	/^  FAST_DTOA_PRECISION$/;"	e	enum:double_conversion::FastDtoaMode
FAST_DTOA_SHORTEST	src/fermat/common/double-conversion/fast-dtoa.h	/^  FAST_DTOA_SHORTEST,$/;"	e	enum:double_conversion::FastDtoaMode
FAST_DTOA_SHORTEST_SINGLE	src/fermat/common/double-conversion/fast-dtoa.h	/^  FAST_DTOA_SHORTEST_SINGLE,$/;"	e	enum:double_conversion::FastDtoaMode
FERMAT_COMMON_ASCII_H_	src/fermat/common/ascii.h	2;"	d
FERMAT_COMMON_BASIC_BUFFER_H_	src/fermat/common/basic_buffer.h	2;"	d
FERMAT_COMMON_CLOCK_H_	src/fermat/common/clock.h	2;"	d
FERMAT_COMMON_CMDLINE_H_	src/fermat/common/cmdline.h	2;"	d
FERMAT_COMMON_COND_H_	src/fermat/common/cond.h	2;"	d
FERMAT_COMMON_ENV_H_	src/fermat/common/env.h	2;"	d
FERMAT_COMMON_FORMAT_H_	src/fermat/common/format.h	2;"	d
FERMAT_COMMON_LOGGER_H_	src/fermat/common/logging.h	2;"	d
FERMAT_COMMON_LOG_ASYNC_H_	src/fermat/common/log_async.h	2;"	d
FERMAT_COMMON_LOG_FILE_H_	src/fermat/common/log_file.h	2;"	d
FERMAT_COMMON_LOG_STREAM_H_	src/fermat/common/log_stream.h	2;"	d
FERMAT_COMMON_MUTEX_H_	src/fermat/common/mutex.h	2;"	d
FERMAT_COMMON_NUMEIC_FORMATTER_H_	src/fermat/common/numeric_formatter.h	2;"	d
FERMAT_COMMON_NUMERIC_PARSER_H_	src/fermat/common/numeric_parser.h	2;"	d
FERMAT_COMMON_NUMERIC_STRING_H_	src/fermat/common/numeric_string.h	2;"	d
FERMAT_COMMON_RUNNABLE_H_	src/fermat/common/runnable.h	2;"	d
FERMAT_COMMON_SEQUENCE_WRITE_FILE_H_	src/fermat/common/sequence_write_file.h	2;"	d
FERMAT_COMMON_SINGLETON_H_	src/fermat/common/singleton.h	2;"	d
FERMAT_COMMON_STACK_BUFFER_H_	src/fermat/common/stack_buffer.h	2;"	d
FERMAT_COMMON_STOP_WATCHER_H_	src/fermat/common/stop_watcher.h	2;"	d
FERMAT_COMMON_STRING_H_	src/fermat/common/string.h	2;"	d
FERMAT_COMMON_STRING_REF_H_	src/fermat/common/string_ref.h	2;"	d
FERMAT_COMMON_THISTHREAD_H_	src/fermat/common/this_thread.h	2;"	d
FERMAT_COMMON_THREAD_H_	src/fermat/common/thread.h	2;"	d
FERMAT_COMMON_TIMESPAN_H_	src/fermat/common/timespan.h	2;"	d
FERMAT_COMMON_TIMESTAMP_H_	src/fermat/common/timestamp.h	2;"	d
FIXED	src/fermat/common/double-conversion/double-conversion.h	/^    FIXED,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
FORMAT_ARG_TYPE_DEFAULT	src/fermat/common/format.h	1795;"	d
FORMAT_ASSERT	src/fermat/common/format.h	161;"	d
FORMAT_ASSIGN_char	src/fermat/common/format.h	1845;"	d
FORMAT_ASSIGN_wchar_t	src/fermat/common/format.h	1847;"	d
FORMAT_BUILTIN_CLZ	src/fermat/common/format.h	166;"	d
FORMAT_BUILTIN_CLZLL	src/fermat/common/format.h	170;"	d
FORMAT_CATCH	src/fermat/common/format_in.h	19;"	d
FORMAT_DEFINE_INT_FORMATTERS	src/fermat/common/format.h	1351;"	d
FORMAT_DELETED_OR_UNDEFINED	src/fermat/common/format.h	139;"	d
FORMAT_DELETED_OR_UNDEFINED	src/fermat/common/format.h	144;"	d
FORMAT_DISABLE_CONVERSION_TO_INT	src/fermat/common/format.h	682;"	d
FORMAT_DISALLOW_COPY_AND_ASSIGN	src/fermat/common/format.h	140;"	d
FORMAT_DISALLOW_COPY_AND_ASSIGN	src/fermat/common/format.h	145;"	d
FORMAT_DISPATCH	src/fermat/common/format.h	927;"	d
FORMAT_EXCEPTIONS	src/fermat/common/format.h	101;"	d
FORMAT_EXCEPTIONS	src/fermat/common/format.h	95;"	d
FORMAT_EXCEPTIONS	src/fermat/common/format.h	98;"	d
FORMAT_FOR_EACH1	src/fermat/common/format.h	1920;"	d
FORMAT_FOR_EACH10	src/fermat/common/format.h	1937;"	d
FORMAT_FOR_EACH2	src/fermat/common/format.h	1921;"	d
FORMAT_FOR_EACH3	src/fermat/common/format.h	1923;"	d
FORMAT_FOR_EACH4	src/fermat/common/format.h	1925;"	d
FORMAT_FOR_EACH5	src/fermat/common/format.h	1927;"	d
FORMAT_FOR_EACH6	src/fermat/common/format.h	1929;"	d
FORMAT_FOR_EACH7	src/fermat/common/format.h	1931;"	d
FORMAT_FOR_EACH8	src/fermat/common/format.h	1933;"	d
FORMAT_FOR_EACH9	src/fermat/common/format.h	1935;"	d
FORMAT_FUNC	src/fermat/common/format_in.h	25;"	d
FORMAT_GCC_EXTENSION	src/fermat/common/format.h	25;"	d
FORMAT_GCC_EXTENSION	src/fermat/common/format.h	42;"	d
FORMAT_GCC_VERSION	src/fermat/common/format.h	24;"	d
FORMAT_GEN	src/fermat/common/format.h	1716;"	d
FORMAT_GEN1	src/fermat/common/format.h	1717;"	d
FORMAT_GEN10	src/fermat/common/format.h	1726;"	d
FORMAT_GEN11	src/fermat/common/format.h	1727;"	d
FORMAT_GEN12	src/fermat/common/format.h	1728;"	d
FORMAT_GEN13	src/fermat/common/format.h	1729;"	d
FORMAT_GEN14	src/fermat/common/format.h	1730;"	d
FORMAT_GEN15	src/fermat/common/format.h	/^inline uint64_t make_type(FORMAT_GEN15(FORMAT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fermat
FORMAT_GEN15	src/fermat/common/format.h	1731;"	d
FORMAT_GEN2	src/fermat/common/format.h	1718;"	d
FORMAT_GEN3	src/fermat/common/format.h	1719;"	d
FORMAT_GEN4	src/fermat/common/format.h	1720;"	d
FORMAT_GEN5	src/fermat/common/format.h	1721;"	d
FORMAT_GEN6	src/fermat/common/format.h	1722;"	d
FORMAT_GEN7	src/fermat/common/format.h	1723;"	d
FORMAT_GEN8	src/fermat/common/format.h	1724;"	d
FORMAT_GEN9	src/fermat/common/format.h	1725;"	d
FORMAT_GNUC_LIBSTD_VERSION	src/fermat/common/format.h	51;"	d
FORMAT_HAS_BUILTIN	src/fermat/common/format.h	61;"	d
FORMAT_HAS_BUILTIN	src/fermat/common/format.h	63;"	d
FORMAT_HAS_CPP_ATTRIBUTE	src/fermat/common/format.h	67;"	d
FORMAT_HAS_CPP_ATTRIBUTE	src/fermat/common/format.h	69;"	d
FORMAT_HAS_FEATURE	src/fermat/common/format.h	55;"	d
FORMAT_HAS_FEATURE	src/fermat/common/format.h	57;"	d
FORMAT_HAS_GXX_CXX11	src/fermat/common/format.h	39;"	d
FORMAT_MAKE_ARG	src/fermat/common/format.h	1844;"	d
FORMAT_MAKE_ARG_TYPE	src/fermat/common/format.h	1843;"	d
FORMAT_MAKE_STR_VALUE	src/fermat/common/format.h	836;"	d
FORMAT_MAKE_TEMPLATE_ARG	src/fermat/common/format.h	1842;"	d
FORMAT_MAKE_VALUE	src/fermat/common/format.h	782;"	d
FORMAT_MAKE_VALUE_	src/fermat/common/format.h	778;"	d
FORMAT_MAKE_WSTR_VALUE	src/fermat/common/format.h	848;"	d
FORMAT_NOEXCEPT	src/fermat/common/format.h	/^                                 fermat::StringRef message) FORMAT_NOEXCEPT;$/;"	m	namespace:fermat::internal
FORMAT_NOEXCEPT	src/fermat/common/format.h	122;"	d
FORMAT_NOEXCEPT	src/fermat/common/format.h	124;"	d
FORMAT_NOEXCEPT	src/fermat/common/format.h	127;"	d
FORMAT_POWERS_OF_10	src/fermat/common/format_in.h	499;"	d
FORMAT_SNPRINTF	src/fermat/common/format_in.h	48;"	d
FORMAT_SPECIALIZE_MAKE_UNSIGNED	src/fermat/common/format.h	320;"	d
FORMAT_SWPRINTF	src/fermat/common/format_in.h	49;"	d
FORMAT_THROW	src/fermat/common/format.h	106;"	d
FORMAT_THROW	src/fermat/common/format.h	108;"	d
FORMAT_TRY	src/fermat/common/format_in.h	18;"	d
FORMAT_USE_DELETED_FUNCTIONS	src/fermat/common/format.h	134;"	d
FORMAT_USE_NOEXCEPT	src/fermat/common/format.h	114;"	d
FORMAT_USE_RVALUE_REFERENCES	src/fermat/common/format.h	85;"	d
FORMAT_USE_RVALUE_REFERENCES	src/fermat/common/format.h	87;"	d
FORMAT_USE_USER_DEFINED_LITERALS	src/fermat/common/format.h	154;"	d
FORMAT_USE_VARIADIC_TEMPLATES	src/fermat/common/format.h	76;"	d
FORMAT_VARIADIC_CTOR	src/fermat/common/format.h	1862;"	d
FORMAT_VARIADIC_VOID	src/fermat/common/format.h	1852;"	d
FPUtil	src/fermat/common/format.h	/^typedef std::numeric_limits<fermat::internal::DummyInt> FPUtil;$/;"	t	namespace:fermat::internal
FastDtoa	src/fermat/common/double-conversion/fast-dtoa.cc	/^bool FastDtoa(double v,$/;"	f	namespace:double_conversion
FastDtoaMode	src/fermat/common/double-conversion/fast-dtoa.h	/^enum FastDtoaMode {$/;"	g	namespace:double_conversion
FastFixedDtoa	src/fermat/common/double-conversion/fixed-dtoa.cc	/^bool FastFixedDtoa(double v,$/;"	f	namespace:double_conversion
FillDigits32	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void FillDigits32(uint32_t number, Vector<char> buffer, int* length) {$/;"	f	namespace:double_conversion
FillDigits32FixedLength	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void FillDigits32FixedLength(uint32_t number, int requested_length,$/;"	f	namespace:double_conversion
FillDigits64	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void FillDigits64(uint64_t number, Vector<char> buffer, int* length) {$/;"	f	namespace:double_conversion
FillDigits64FixedLength	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void FillDigits64FixedLength(uint64_t number,$/;"	f	namespace:double_conversion
FillFractionals	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void FillFractionals(uint64_t fractionals, int exponent,$/;"	f	namespace:double_conversion
Finalize	src/fermat/common/double-conversion/utils.h	/^  char* Finalize() {$/;"	f	class:double_conversion::StringBuilder
FixedBuffer	src/fermat/common/format.h	/^    FixedBuffer(Char *array, std::size_t size): fermat::BasicBuffer<Char>(array, size)$/;"	f	class:fermat::internal::FixedBuffer
FixedBuffer	src/fermat/common/format.h	/^class FixedBuffer: public fermat::BasicBuffer<Char>$/;"	c	namespace:fermat::internal
FixupMultiply10	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void FixupMultiply10(int estimated_power, bool is_even,$/;"	f	namespace:double_conversion
Flags	src/fermat/common/double-conversion/double-conversion.h	/^  enum Flags {$/;"	g	class:double_conversion::DoubleToStringConverter
Flags	src/fermat/common/double-conversion/double-conversion.h	/^  enum Flags {$/;"	g	class:double_conversion::StringToDoubleConverter
FormatBuf	src/fermat/common/format.h	/^    FormatBuf(BasicBuffer<Char> &buffer): _buffer(buffer), _start(&buffer[0])$/;"	f	class:fermat::FormatBuf
FormatBuf	src/fermat/common/format.h	/^class FormatBuf: public std::basic_streambuf<Char> {$/;"	c	namespace:fermat
FormatError	src/fermat/common/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fermat::FormatError
FormatError	src/fermat/common/format.h	/^class FormatError: public std::runtime_error {$/;"	c	namespace:fermat
FormatFunc	src/fermat/common/format.h	/^    typedef void(*FormatFunc)($/;"	t	struct:fermat::internal::Value
FormatFunc	src/fermat/common/format_in.h	/^typedef void(*FormatFunc)(fermat::Writer &, int, fermat::StringRef);$/;"	t	namespace:fermat::__anon29
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(ULongLong value) : _str(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(unsigned long value) : _str(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^    explicit FormatInt(unsigned value) : _str(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/fermat/common/format.h	/^class FormatInt {$/;"	c
FormatSigned	src/fermat/common/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSpec	src/fermat/common/format.h	/^    FormatSpec($/;"	f	struct:fermat::FormatSpec
FormatSpec	src/fermat/common/format.h	/^struct FormatSpec: AlignSpec$/;"	s	namespace:fermat
FormatterBase	src/fermat/common/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fermat::internal::FormatterBase
FormatterBase	src/fermat/common/format.h	/^class FormatterBase {$/;"	c	namespace:fermat::internal
FunctorRunnable	src/fermat/common/thread.cc	/^		FunctorRunnable(const Thread::ThreadFactor& functor):$/;"	f	class:fermat::FunctorRunnable
FunctorRunnable	src/fermat/common/thread.cc	/^	class FunctorRunnable: public Runnable {$/;"	c	namespace:fermat	file:
GREEN	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
GenerateCountedDigits	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void GenerateCountedDigits(int count, int* decimal_point,$/;"	f	namespace:double_conversion
GenerateShortestDigits	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void GenerateShortestDigits(Bignum* numerator, Bignum* denominator,$/;"	f	namespace:double_conversion
GetCachedPowerForBinaryExponentRange	src/fermat/common/double-conversion/cached-powers.cc	/^void PowersOfTenCache::GetCachedPowerForBinaryExponentRange($/;"	f	class:double_conversion::PowersOfTenCache
GetCachedPowerForDecimalExponent	src/fermat/common/double-conversion/cached-powers.cc	/^void PowersOfTenCache::GetCachedPowerForDecimalExponent(int requested_exponent,$/;"	f	class:double_conversion::PowersOfTenCache
Grisu3	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool Grisu3(double v,$/;"	f	namespace:double_conversion
Grisu3Counted	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool Grisu3Counted(double v,$/;"	f	namespace:double_conversion
HASH_FLAG	src/fermat/common/format.h	/^    HASH_FLAG = 8,$/;"	e	enum:fermat::__anon27
HandleSpecialValues	src/fermat/common/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::HandleSpecialValues($/;"	f	class:double_conversion::DoubleToStringConverter
HexCharOfValue	src/fermat/common/double-conversion/bignum.cc	/^static char HexCharOfValue(int value) {$/;"	f	namespace:double_conversion
HexCharValue	src/fermat/common/double-conversion/bignum.cc	/^static int HexCharValue(char c) {$/;"	f	namespace:double_conversion
INLINE_BUFFER_SIZE	src/fermat/common/format.h	/^    INLINE_BUFFER_SIZE = 500$/;"	e	enum:fermat::internal::__anon15
INT	src/fermat/common/format.h	/^        INT, $/;"	e	enum:fermat::internal::Value::Type
Impl	src/fermat/common/logging.cc	/^Logging::Impl::Impl(LogLevel level, int savedErrno, const SourceFile& file, int line)$/;"	f	class:fermat::Logging::Impl
Impl	src/fermat/common/logging.h	/^    class Impl {$/;"	c	class:fermat::Logging
Impl	src/fermat/common/numeric_string.h	/^namespace Impl {$/;"	n	namespace:fermat
Infinity	src/fermat/common/double-conversion/ieee.h	/^  static double Infinity() {$/;"	f	class:double_conversion::Double
Infinity	src/fermat/common/double-conversion/ieee.h	/^  static float Infinity() {$/;"	f	class:double_conversion::Single
InitialScaledStartValues	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValues(uint64_t significand,$/;"	f	namespace:double_conversion
InitialScaledStartValuesNegativeExponentNegativePower	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesNegativeExponentNegativePower($/;"	f	namespace:double_conversion
InitialScaledStartValuesNegativeExponentPositivePower	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesNegativeExponentPositivePower($/;"	f	namespace:double_conversion
InitialScaledStartValuesPositiveExponent	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static void InitialScaledStartValuesPositiveExponent($/;"	f	namespace:double_conversion
IntChecker	src/fermat/common/format_in.h	/^struct IntChecker$/;"	s	namespace:fermat::__anon29
IntChecker	src/fermat/common/format_in.h	/^struct IntChecker<true>$/;"	s	namespace:fermat::__anon29
IntFormatSpec	src/fermat/common/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fermat::IntFormatSpec
IntFormatSpec	src/fermat/common/format.h	/^class IntFormatSpec: public SpecT {$/;"	c	namespace:fermat
IntTraits	src/fermat/common/format.h	/^struct IntTraits$/;"	s	namespace:fermat::internal
IsCharacterDigitForRadix	src/fermat/common/double-conversion/double-conversion.cc	/^static bool IsCharacterDigitForRadix(int c, int radix, char a_character) {$/;"	f	namespace:double_conversion
IsClamped	src/fermat/common/double-conversion/bignum.cc	/^bool Bignum::IsClamped() const {$/;"	f	class:double_conversion::Bignum
IsDecimalDigitForRadix	src/fermat/common/double-conversion/double-conversion.cc	/^static bool IsDecimalDigitForRadix(int c, int radix) {$/;"	f	namespace:double_conversion
IsDecimalDigitForRadix	src/fermat/common/double-conversion/double-conversion.cc	/^static bool inline IsDecimalDigitForRadix(int c, int radix) {$/;"	f	namespace:double_conversion
IsDenormal	src/fermat/common/double-conversion/ieee.h	/^  bool IsDenormal() const {$/;"	f	class:double_conversion::Double
IsDenormal	src/fermat/common/double-conversion/ieee.h	/^  bool IsDenormal() const {$/;"	f	class:double_conversion::Single
IsInfinite	src/fermat/common/double-conversion/ieee.h	/^  bool IsInfinite() const {$/;"	f	class:double_conversion::Double
IsInfinite	src/fermat/common/double-conversion/ieee.h	/^  bool IsInfinite() const {$/;"	f	class:double_conversion::Single
IsNan	src/fermat/common/double-conversion/ieee.h	/^  bool IsNan() const {$/;"	f	class:double_conversion::Double
IsNan	src/fermat/common/double-conversion/ieee.h	/^  bool IsNan() const {$/;"	f	class:double_conversion::Single
IsSpecial	src/fermat/common/double-conversion/ieee.h	/^  bool IsSpecial() const {$/;"	f	class:double_conversion::Double
IsSpecial	src/fermat/common/double-conversion/ieee.h	/^  bool IsSpecial() const {$/;"	f	class:double_conversion::Single
IsZero	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  bool IsZero() const {$/;"	f	class:double_conversion::UInt128
IsZeroInt	src/fermat/common/format_in.h	/^class IsZeroInt: public fermat::internal::ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fermat::__anon29
LAST_INTEGER_TYPE	src/fermat/common/format.h	/^        LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fermat::internal::Value::Type
LAST_NUMERIC_TYPE	src/fermat/common/format.h	/^        LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fermat::internal::Value::Type
LOG_DEBUG	src/fermat/common/logging.h	126;"	d
LOG_ERROR	src/fermat/common/logging.h	132;"	d
LOG_FATAL	src/fermat/common/logging.h	133;"	d
LOG_INFO	src/fermat/common/logging.h	128;"	d
LOG_TRACE	src/fermat/common/logging.h	124;"	d
LOG_WARN	src/fermat/common/logging.h	130;"	d
LONG_DOUBLE	src/fermat/common/format.h	/^        LONG_DOUBLE, $/;"	e	enum:fermat::internal::Value::Type
LONG_LONG	src/fermat/common/format.h	/^        LONG_LONG, $/;"	e	enum:fermat::internal::Value::Type
Less	src/fermat/common/double-conversion/bignum.h	/^  static bool Less(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
LessEqual	src/fermat/common/double-conversion/bignum.h	/^  static bool LessEqual(const Bignum& a, const Bignum& b) {$/;"	f	class:double_conversion::Bignum
LogAsync	src/fermat/common/log_async.cc	/^LogAsync::LogAsync(const std::string &baseName,$/;"	f	class:fermat::LogAsync
LogAsync	src/fermat/common/log_async.h	/^class LogAsync : public LogOutput {$/;"	c	namespace:fermat
LogFile	src/fermat/common/log_file.h	/^class LogFile {$/;"	c	namespace:fermat
LogFile	src/fermat/common/log_file.h	/^inline LogFile<MUTEX>::LogFile(const std::string &name, $/;"	f	class:fermat::LogFile
LogLevel	src/fermat/common/logging.h	/^        typedef Logging::LogLevel LogLevel;$/;"	t	class:fermat::Logging::Impl
LogLevel	src/fermat/common/logging.h	/^    enum LogLevel{$/;"	g	class:fermat::Logging
LogLevelName	src/fermat/common/logging.cc	/^const char* LogLevelName[Logging::eNUM_LOG_LEVELS] =$/;"	m	namespace:fermat	file:
LogOutput	src/fermat/common/logging.h	/^    explicit LogOutput(const std::string& logName) : _log_name(logName) {}$/;"	f	class:fermat::LogOutput
LogOutput	src/fermat/common/logging.h	/^class LogOutput {$/;"	c	namespace:fermat
LogOutputPtr	src/fermat/common/logging.h	/^typedef std::shared_ptr<LogOutput> LogOutputPtr;$/;"	t	namespace:fermat
LogStream	src/fermat/common/log_stream.h	/^    LogStream(){}$/;"	f	class:fermat::LogStream
LogStream	src/fermat/common/log_stream.h	/^class LogStream{$/;"	c	namespace:fermat
Logging	src/fermat/common/logging.cc	/^Logging::Logging(SourceFile file, int line)$/;"	f	class:fermat::Logging
Logging	src/fermat/common/logging.cc	/^Logging::Logging(SourceFile file, int line, LogLevel level)$/;"	f	class:fermat::Logging
Logging	src/fermat/common/logging.cc	/^Logging::Logging(SourceFile file, int line, LogLevel level, const char* func)$/;"	f	class:fermat::Logging
Logging	src/fermat/common/logging.cc	/^Logging::Logging(SourceFile file, int line, bool toAbort)$/;"	f	class:fermat::Logging
Logging	src/fermat/common/logging.h	/^class Logging {$/;"	c	namespace:fermat
LongLong	src/fermat/common/format.h	/^FORMAT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fermat
LowerBoundaryIsCloser	src/fermat/common/double-conversion/ieee.h	/^  bool LowerBoundaryIsCloser() const {$/;"	f	class:double_conversion::Double
LowerBoundaryIsCloser	src/fermat/common/double-conversion/ieee.h	/^  bool LowerBoundaryIsCloser() const {$/;"	f	class:double_conversion::Single
MAGENTA	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
MAX_PACKED_ARGS	src/fermat/common/format.h	/^        MAX_PACKED_ARGS = 16$/;"	e	enum:fermat::ArgList::__anon26
MINUS_FLAG	src/fermat/common/format.h	/^    MINUS_FLAG = 4, $/;"	e	enum:fermat::__anon27
MakeArg	src/fermat/common/format.h	/^    MakeArg()$/;"	f	class:fermat::internal::MakeArg
MakeArg	src/fermat/common/format.h	/^    MakeArg(const T &value)$/;"	f	class:fermat::internal::MakeArg
MakeArg	src/fermat/common/format.h	/^class MakeArg: public Arg$/;"	c	namespace:fermat::internal
MakeUnsigned	src/fermat/common/format.h	/^struct MakeUnsigned$/;"	s	namespace:fermat::internal
MakeValue	src/fermat/common/format.h	/^    MakeValue()$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^    MakeValue(const T &value,$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^    MakeValue(long value)$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fermat::internal::MakeValue
MakeValue	src/fermat/common/format.h	/^class MakeValue: public Arg {$/;"	c	namespace:fermat::internal
MapType	src/fermat/common/format.h	/^    typedef std::vector<std::pair<fermat::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fermat::internal::ArgMap
Max	src/fermat/common/double-conversion/utils.h	/^static T Max(T a, T b) {$/;"	f	namespace:double_conversion
MemoryWriter	src/fermat/common/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
Min	src/fermat/common/double-conversion/utils.h	/^static T Min(T a, T b) {$/;"	f	namespace:double_conversion
Minus	src/fermat/common/double-conversion/diy-fp.h	/^  static DiyFp Minus(const DiyFp& a, const DiyFp& b) {$/;"	f	class:double_conversion::DiyFp
Multiply	src/fermat/common/double-conversion/diy-fp.cc	/^void DiyFp::Multiply(const DiyFp& other) {$/;"	f	class:double_conversion::DiyFp
Multiply	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  void Multiply(uint32_t multiplicand) {$/;"	f	class:double_conversion::UInt128
MultiplyByPowerOfTen	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::MultiplyByPowerOfTen(int exponent) {$/;"	f	class:double_conversion::Bignum
MultiplyByUInt32	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::MultiplyByUInt32(uint32_t factor) {$/;"	f	class:double_conversion::Bignum
MultiplyByUInt64	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::MultiplyByUInt64(uint64_t factor) {$/;"	f	class:double_conversion::Bignum
Mutex	src/fermat/common/mutex.cc	/^Mutex::Mutex() $/;"	f	class:fermat::Mutex
Mutex	src/fermat/common/mutex.cc	/^Mutex::Mutex(MutexType type) $/;"	f	class:fermat::Mutex
Mutex	src/fermat/common/mutex.h	/^class Mutex{$/;"	c	namespace:fermat
MutexType	src/fermat/common/mutex.h	/^enum class MutexType {$/;"	c	namespace:fermat
NAMED_ARG	src/fermat/common/format.h	/^        NAMED_ARG,$/;"	e	enum:fermat::internal::Value::Type
NONE	src/fermat/common/format.h	/^        NONE, $/;"	e	enum:fermat::internal::Value::Type
NO_FLAGS	src/fermat/common/double-conversion/double-conversion.h	/^    NO_FLAGS = 0,$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
NO_FLAGS	src/fermat/common/double-conversion/double-conversion.h	/^    NO_FLAGS = 0,$/;"	e	enum:double_conversion::StringToDoubleConverter::Flags
NaN	src/fermat/common/double-conversion/ieee.h	/^  static double NaN() {$/;"	f	class:double_conversion::Double
NaN	src/fermat/common/double-conversion/ieee.h	/^  static float NaN() {$/;"	f	class:double_conversion::Single
NamedArg	src/fermat/common/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fermat::internal::NamedArg
NamedArg	src/fermat/common/format.h	/^struct NamedArg: Arg$/;"	s	namespace:fermat::internal
NextDouble	src/fermat/common/double-conversion/ieee.h	/^  double NextDouble() const {$/;"	f	class:double_conversion::Double
No	src/fermat/common/format.h	/^typedef char No[2];$/;"	t	namespace:fermat::internal
Normalize	src/fermat/common/double-conversion/diy-fp.h	/^  static DiyFp Normalize(const DiyFp& a) {$/;"	f	class:double_conversion::DiyFp
Normalize	src/fermat/common/double-conversion/diy-fp.h	/^  void Normalize() {$/;"	f	class:double_conversion::DiyFp
NormalizedBoundaries	src/fermat/common/double-conversion/ieee.h	/^  void NormalizedBoundaries(DiyFp* out_m_minus, DiyFp* out_m_plus) const {$/;"	f	class:double_conversion::Double
NormalizedBoundaries	src/fermat/common/double-conversion/ieee.h	/^  void NormalizedBoundaries(DiyFp* out_m_minus, DiyFp* out_m_plus) const {$/;"	f	class:double_conversion::Single
NormalizedExponent	src/fermat/common/double-conversion/bignum-dtoa.cc	/^static int NormalizedExponent(uint64_t significand, int exponent) {$/;"	f	namespace:double_conversion
Not	src/fermat/common/format.h	/^struct Not {$/;"	s	namespace:fermat::internal
Not	src/fermat/common/format.h	/^struct Not<false> {$/;"	s	namespace:fermat::internal
Null	src/fermat/common/format.h	/^struct Null$/;"	s	namespace:fermat::internal
NullMutex	src/fermat/common/mutex.h	/^    NullMutex(){ }$/;"	f	class:fermat::NullMutex
NullMutex	src/fermat/common/mutex.h	/^    NullMutex(MutexType type) { (void)type; }$/;"	f	class:fermat::NullMutex
NullMutex	src/fermat/common/mutex.h	/^class NullMutex{$/;"	c	namespace:fermat
NumberFormatter	src/fermat/common/numeric_formatter.h	/^class NumberFormatter {$/;"	c	namespace:fermat
NumberParser	src/fermat/common/numeric_parser.h	/^class NumberParser {$/;"	c	namespace:fermat
PLUS_FLAG	src/fermat/common/format.h	/^    PLUS_FLAG = 2, $/;"	e	enum:fermat::__anon27
POINTER	src/fermat/common/format.h	/^        POINTER, $/;"	e	enum:fermat::internal::Value::Type
POLICY_DEFAULT	src/fermat/common/thread.h	/^		POLICY_DEFAULT = SCHED_OTHER$/;"	e	enum:fermat::Thread::Policy
POWERS_OF_10_32	src/fermat/common/format_in.h	/^const uint32_t fermat::internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fermat::internal::BasicData
POWERS_OF_10_64	src/fermat/common/format_in.h	/^const uint64_t fermat::internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fermat::internal::BasicData
PRECISION	src/fermat/common/double-conversion/double-conversion.h	/^    PRECISION$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
PRIO_HIGH	src/fermat/common/thread.h	/^		PRIO_HIGH    ,    \/\/!< A higher than normal thread priority.$/;"	e	enum:fermat::Thread::Priority
PRIO_HIGHEST	src/fermat/common/thread.h	/^		PRIO_HIGHEST      \/\/!< The highest thread priority.$/;"	e	enum:fermat::Thread::Priority
PRIO_LOW	src/fermat/common/thread.h	/^		PRIO_LOW     ,    \/\/!< A lower than normal thread priority.$/;"	e	enum:fermat::Thread::Priority
PRIO_LOWEST	src/fermat/common/thread.h	/^		PRIO_LOWEST  ,     \/\/!< The lowest thread priority.$/;"	e	enum:fermat::Thread::Priority
PRIO_NORMAL	src/fermat/common/thread.h	/^		PRIO_NORMAL  ,    \/\/!< The normal thread priority.$/;"	e	enum:fermat::Thread::Priority
Pair	src/fermat/common/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fermat::internal::ArgMap
PlusCompare	src/fermat/common/double-conversion/bignum.cc	/^int Bignum::PlusCompare(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusEqual	src/fermat/common/double-conversion/bignum.h	/^  static bool PlusEqual(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusLess	src/fermat/common/double-conversion/bignum.h	/^  static bool PlusLess(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
PlusLessEqual	src/fermat/common/double-conversion/bignum.h	/^  static bool PlusLessEqual(const Bignum& a, const Bignum& b, const Bignum& c) {$/;"	f	class:double_conversion::Bignum
Policy	src/fermat/common/thread.h	/^	enum Policy {$/;"	g	class:fermat::Thread
PowersOfTenCache	src/fermat/common/double-conversion/cached-powers.h	/^class PowersOfTenCache {$/;"	c	namespace:double_conversion
PrecisionHandler	src/fermat/common/format_in.h	/^class PrecisionHandler:$/;"	c	namespace:fermat::__anon29
PreviousDouble	src/fermat/common/double-conversion/ieee.h	/^  double PreviousDouble() const {$/;"	f	class:double_conversion::Double
PrintfArgFormatter	src/fermat/common/format_in.h	/^    PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fermat::internal::PrintfArgFormatter
PrintfArgFormatter	src/fermat/common/format_in.h	/^class PrintfArgFormatter:$/;"	c	namespace:fermat::internal
PrintfFormatter	src/fermat/common/format.h	/^    explicit PrintfFormatter(const ArgList &args): FormatterBase(args)$/;"	f	class:fermat::internal::PrintfFormatter
PrintfFormatter	src/fermat/common/format.h	/^class PrintfFormatter: private FormatterBase$/;"	c	namespace:fermat::internal
Priority	src/fermat/common/thread.h	/^	enum Priority {$/;"	g	class:fermat::Thread
Ptr	src/fermat/common/numeric_string.h	/^		Ptr(char* ptr, size_t offset): _beg(ptr), _cur(ptr), _end(ptr + offset)$/;"	f	class:fermat::Impl::Ptr
Ptr	src/fermat/common/numeric_string.h	/^	class Ptr {$/;"	c	namespace:fermat::Impl
RED	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
RESET_COLOR	src/fermat/common/format_in.h	/^const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fermat::__anon29
RS_RUNING	src/fermat/common/thread.h	/^		RS_RUNING,$/;"	e	enum:fermat::Thread::RunState
RS_STOP	src/fermat/common/thread.h	/^		RS_STOP,$/;"	e	enum:fermat::Thread::RunState
RS_STOPING	src/fermat/common/thread.h	/^		RS_STOPING$/;"	e	enum:fermat::Thread::RunState
RadixStringToIeee	src/fermat/common/double-conversion/double-conversion.cc	/^static double RadixStringToIeee(Iterator* current,$/;"	f	namespace:double_conversion
ReadDiyFp	src/fermat/common/double-conversion/strtod.cc	/^static void ReadDiyFp(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ReadUInt64	src/fermat/common/double-conversion/bignum.cc	/^static uint64_t ReadUInt64(Vector<const char> buffer,$/;"	f	namespace:double_conversion
ReadUint64	src/fermat/common/double-conversion/strtod.cc	/^static uint64_t ReadUint64(Vector<const char> buffer,$/;"	f	namespace:double_conversion
Reset	src/fermat/common/double-conversion/utils.h	/^  void Reset() { position_ = 0; }$/;"	f	class:double_conversion::StringBuilder
RoundUp	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void RoundUp(Vector<char> buffer, int* length, int* decimal_point) {$/;"	f	namespace:double_conversion
RoundWeed	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool RoundWeed(Vector<char> buffer,$/;"	f	namespace:double_conversion
RoundWeedCounted	src/fermat/common/double-conversion/fast-dtoa.cc	/^static bool RoundWeedCounted(Vector<char> buffer,$/;"	f	namespace:double_conversion
RunState	src/fermat/common/thread.h	/^	enum RunState {$/;"	g	class:fermat::Thread
Runnable	src/fermat/common/runnable.cc	/^Runnable::Runnable()$/;"	f	class:fermat::Runnable
Runnable	src/fermat/common/runnable.h	/^class  Runnable {$/;"	c	namespace:fermat
RunnablePtr	src/fermat/common/runnable.h	/^typedef std::shared_ptr<Runnable> RunnablePtr;$/;"	t	namespace:fermat
RuntimeError	src/fermat/common/format.h	/^    RuntimeError(): std::runtime_error("")$/;"	f	class:fermat::internal::RuntimeError
RuntimeError	src/fermat/common/format.h	/^class RuntimeError: public std::runtime_error$/;"	c	namespace:fermat::internal
SHORTEST	src/fermat/common/double-conversion/double-conversion.h	/^    SHORTEST,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
SHORTEST_SINGLE	src/fermat/common/double-conversion/double-conversion.h	/^    SHORTEST_SINGLE,$/;"	e	enum:double_conversion::DoubleToStringConverter::DtoaMode
SIGN_FLAG	src/fermat/common/format.h	/^    SIGN_FLAG = 1, $/;"	e	enum:fermat::__anon27
SS_SLEEP	src/fermat/common/thread.h	/^		SS_SLEEP$/;"	e	enum:fermat::Thread::SleepStat
SS_WAKE	src/fermat/common/thread.h	/^		SS_WAKE,$/;"	e	enum:fermat::Thread::SleepStat
STRING	src/fermat/common/format.h	/^        STRING, $/;"	e	enum:fermat::internal::Value::Type
ScopedLock	src/fermat/common/mutex.h	/^    explicit ScopedLock(LOCK &lock) : _lock(lock)$/;"	f	class:fermat::ScopedLock
ScopedLock	src/fermat/common/mutex.h	/^class ScopedLock{$/;"	c	namespace:fermat
ScopedMutex	src/fermat/common/mutex.h	/^typedef ScopedLock<Mutex> ScopedMutex;$/;"	t	namespace:fermat
SequenceWriteFile	src/fermat/common/sequence_write_file.cc	/^SequenceWriteFile::SequenceWriteFile(const char* fileName) $/;"	f	class:fermat::SequenceWriteFile
SequenceWriteFile	src/fermat/common/sequence_write_file.cc	/^SequenceWriteFile::SequenceWriteFile(const std::string& fileName)$/;"	f	class:fermat::SequenceWriteFile
SequenceWriteFile	src/fermat/common/sequence_write_file.h	/^class SequenceWriteFile {$/;"	c	namespace:fermat
SharedState	src/fermat/common/shared_state.h	/^	explicit SharedState(const T &value):_value(value), _mutex(), _cond()$/;"	f	class:fermat::SharedState
SharedState	src/fermat/common/shared_state.h	/^class SharedState {$/;"	c	namespace:fermat
Shift	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  void Shift(int shift_amount) {$/;"	f	class:double_conversion::UInt128
ShiftLeft	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::ShiftLeft(int shift_amount) {$/;"	f	class:double_conversion::Bignum
Sign	src/fermat/common/double-conversion/ieee.h	/^  int Sign() const {$/;"	f	class:double_conversion::Double
Sign	src/fermat/common/double-conversion/ieee.h	/^  int Sign() const {$/;"	f	class:double_conversion::Single
SignChecker	src/fermat/common/format.h	/^struct SignChecker$/;"	s	namespace:fermat::internal
SignChecker	src/fermat/common/format.h	/^struct SignChecker<false>$/;"	s	namespace:fermat::internal
SignedZero	src/fermat/common/double-conversion/double-conversion.cc	/^static double SignedZero(bool sign) {$/;"	f	namespace:double_conversion
Significand	src/fermat/common/double-conversion/ieee.h	/^  uint32_t Significand() const {$/;"	f	class:double_conversion::Single
Significand	src/fermat/common/double-conversion/ieee.h	/^  uint64_t Significand() const {$/;"	f	class:double_conversion::Double
SignificandSizeForOrderOfMagnitude	src/fermat/common/double-conversion/ieee.h	/^  static int SignificandSizeForOrderOfMagnitude(int order) {$/;"	f	class:double_conversion::Double
Single	src/fermat/common/double-conversion/ieee.h	/^  Single() : d32_(0) {}$/;"	f	class:double_conversion::Single
Single	src/fermat/common/double-conversion/ieee.h	/^  explicit Single(float f) : d32_(float_to_uint32(f)) {}$/;"	f	class:double_conversion::Single
Single	src/fermat/common/double-conversion/ieee.h	/^  explicit Single(uint32_t d32) : d32_(d32) {}$/;"	f	class:double_conversion::Single
Single	src/fermat/common/double-conversion/ieee.h	/^class Single {$/;"	c	namespace:double_conversion
Singleton	src/fermat/common/singleton.h	/^    Singleton() {}$/;"	f	class:fermat::Singleton
Singleton	src/fermat/common/singleton.h	/^class Singleton {$/;"	c	namespace:fermat
SizeInHexChars	src/fermat/common/double-conversion/bignum.cc	/^static int SizeInHexChars(S number) {$/;"	f	namespace:double_conversion
SleepStat	src/fermat/common/thread.h	/^	enum SleepStat {$/;"	g	class:fermat::Thread
SourceFile	src/fermat/common/logging.h	/^        explicit SourceFile(const char* filename)$/;"	f	class:fermat::Logging::SourceFile
SourceFile	src/fermat/common/logging.h	/^        inline SourceFile(const char (&arr)[N])$/;"	f	class:fermat::Logging::SourceFile
SourceFile	src/fermat/common/logging.h	/^    class SourceFile{$/;"	c	class:fermat::Logging
Square	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::Square() {$/;"	f	class:double_conversion::Bignum
StackBuffer	src/fermat/common/stack_buffer.h	/^    StackBuffer(StackBuffer &&other)$/;"	f	class:fermat::StackBuffer
StackBuffer	src/fermat/common/stack_buffer.h	/^    explicit StackBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fermat::StackBuffer
StackBuffer	src/fermat/common/stack_buffer.h	/^class StackBuffer: private Allocator, public BasicBuffer<T> {$/;"	c	namespace:fermat
StopWatcher	src/fermat/common/stop_watcher.h	/^class  StopWatcher {$/;"	c	namespace:fermat
StopWatcher	src/fermat/common/stop_wathcer.cc	/^StopWatcher::StopWatcher(): _elapsed(0), _running(false)$/;"	f	class:fermat::StopWatcher
StrFormatSpec	src/fermat/common/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fermat::StrFormatSpec
StrFormatSpec	src/fermat/common/format.h	/^class StrFormatSpec: public AlignSpec {$/;"	c	namespace:fermat
StrLength	src/fermat/common/double-conversion/utils.h	/^inline int StrLength(const char* string) {$/;"	f	namespace:double_conversion
StringBuilder	src/fermat/common/double-conversion/utils.h	/^  StringBuilder(char* buffer, int buffer_size)$/;"	f	class:double_conversion::StringBuilder
StringBuilder	src/fermat/common/double-conversion/utils.h	/^class StringBuilder {$/;"	c	namespace:double_conversion
StringRef	src/fermat/common/string_ref.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fermat
StringToDouble	src/fermat/common/double-conversion/double-conversion.cc	/^double StringToDoubleConverter::StringToDouble($/;"	f	class:double_conversion::StringToDoubleConverter
StringToDoubleConverter	src/fermat/common/double-conversion/double-conversion.h	/^  StringToDoubleConverter(int flags,$/;"	f	class:double_conversion::StringToDoubleConverter
StringToDoubleConverter	src/fermat/common/double-conversion/double-conversion.h	/^class StringToDoubleConverter {$/;"	c	namespace:double_conversion
StringToFloat	src/fermat/common/double-conversion/double-conversion.cc	/^float StringToDoubleConverter::StringToFloat($/;"	f	class:double_conversion::StringToDoubleConverter
StringToIeee	src/fermat/common/double-conversion/double-conversion.cc	/^double StringToDoubleConverter::StringToIeee($/;"	f	class:double_conversion::StringToDoubleConverter
StringValue	src/fermat/common/format.h	/^    struct StringValue {$/;"	s	struct:fermat::internal::Value
Strtod	src/fermat/common/double-conversion/strtod.cc	/^double Strtod(Vector<const char> buffer, int exponent) {$/;"	f	namespace:double_conversion
Strtof	src/fermat/common/double-conversion/strtod.cc	/^float Strtof(Vector<const char> buffer, int exponent) {$/;"	f	namespace:double_conversion
SubVector	src/fermat/common/double-conversion/utils.h	/^  Vector<T> SubVector(int from, int to) {$/;"	f	class:double_conversion::Vector
Subtract	src/fermat/common/double-conversion/diy-fp.h	/^  void Subtract(const DiyFp& other) {$/;"	f	class:double_conversion::DiyFp
SubtractBignum	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::SubtractBignum(const Bignum& other) {$/;"	f	class:double_conversion::Bignum
SubtractTimes	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::SubtractTimes(const Bignum& other, int factor) {$/;"	f	class:double_conversion::Bignum
Supported	src/fermat/common/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fermat::internal::WCharHelper
Supported	src/fermat/common/format.h	/^    typedef T Supported;$/;"	t	struct:fermat::internal::WCharHelper
SystemError	src/fermat/common/format.h	/^    SystemError()$/;"	f	class:SystemError
SystemError	src/fermat/common/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	src/fermat/common/format.h	/^class SystemError: public internal::RuntimeError {$/;"	c
T	src/fermat/common/logging.cc	/^  T(const char* str, unsigned len)$/;"	f	class:fermat::T
T	src/fermat/common/logging.cc	/^class T {$/;"	c	namespace:fermat	file:
TID	src/fermat/common/thread.h	/^	typedef pthread_t TID;$/;"	t	class:fermat::Thread
Thread	src/fermat/common/thread.cc	/^Thread::Thread(): $/;"	f	class:fermat::Thread
Thread	src/fermat/common/thread.cc	/^Thread::Thread(const std::string& rName): $/;"	f	class:fermat::Thread
Thread	src/fermat/common/thread.h	/^class  Thread {$/;"	c	namespace:fermat
ThreadData	src/fermat/common/thread.cc	/^		ThreadData():$/;"	f	class:fermat::Thread::ThreadData
ThreadData	src/fermat/common/thread.cc	/^	class Thread::ThreadData {$/;"	c	class:fermat::Thread	file:
ThreadDataPtr	src/fermat/common/thread.h	/^	typedef std::shared_ptr<ThreadData> ThreadDataPtr;$/;"	t	class:fermat::Thread
ThreadFactor	src/fermat/common/thread.h	/^	typedef std::function<void()> ThreadFactor;$/;"	t	class:fermat::Thread
TimeDiff	src/fermat/common/timespan.h	/^    typedef Timestamp::TimeDiff  TimeDiff;$/;"	t	class:fermat::Timespan
TimeDiff	src/fermat/common/timestamp.h	/^    typedef int64_t TimeDiff;$/;"	t	class:fermat::Timestamp
TimeVal	src/fermat/common/timestamp.h	/^    typedef int64_t TimeVal;$/;"	t	class:fermat::Timestamp
TimedMutex	src/fermat/common/mutex.cc	/^TimedMutex::TimedMutex()$/;"	f	class:fermat::TimedMutex
TimedMutex	src/fermat/common/mutex.h	/^class TimedMutex{$/;"	c	namespace:fermat
Times	src/fermat/common/double-conversion/diy-fp.h	/^  static DiyFp Times(const DiyFp& a, const DiyFp& b) {$/;"	f	class:double_conversion::DiyFp
Times10	src/fermat/common/double-conversion/bignum.h	/^  void Times10() { return MultiplyByUInt32(10); }$/;"	f	class:double_conversion::Bignum
Timespan	src/fermat/common/timespan.cc	/^Timespan::Timespan() : _span(0)$/;"	f	class:fermat::Timespan
Timespan	src/fermat/common/timespan.cc	/^Timespan::Timespan(TimeDiff microSecond) :_span(microSecond)$/;"	f	class:fermat::Timespan
Timespan	src/fermat/common/timespan.cc	/^Timespan::Timespan(const Timespan &rhs)$/;"	f	class:fermat::Timespan
Timespan	src/fermat/common/timespan.cc	/^Timespan::Timespan(int day, int hour, int min, int sec, int microSec)$/;"	f	class:fermat::Timespan
Timespan	src/fermat/common/timespan.cc	/^Timespan::Timespan(long sec, long microSec) : _span(sec * kSeconds + microSec)$/;"	f	class:fermat::Timespan
Timespan	src/fermat/common/timespan.h	/^class Timespan {$/;"	c	namespace:fermat
Timestamp	src/fermat/common/timestamp.cc	/^Timestamp::Timestamp()$/;"	f	class:fermat::Timestamp
Timestamp	src/fermat/common/timestamp.cc	/^Timestamp::Timestamp(Timestamp::TimeVal tv) : _ts(tv)$/;"	f	class:fermat::Timestamp
Timestamp	src/fermat/common/timestamp.cc	/^Timestamp::Timestamp(const Timestamp &other)$/;"	f	class:fermat::Timestamp
Timestamp	src/fermat/common/timestamp.h	/^class Timestamp {$/;"	c	namespace:fermat
ToExponential	src/fermat/common/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToExponential($/;"	f	class:double_conversion::DoubleToStringConverter
ToFixed	src/fermat/common/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToFixed(double value,$/;"	f	class:double_conversion::DoubleToStringConverter
ToHexString	src/fermat/common/double-conversion/bignum.cc	/^bool Bignum::ToHexString(char* buffer, int buffer_size) const {$/;"	f	class:double_conversion::Bignum
ToPrecision	src/fermat/common/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToPrecision(double value,$/;"	f	class:double_conversion::DoubleToStringConverter
ToShortest	src/fermat/common/double-conversion/double-conversion.h	/^  bool ToShortest(double value, StringBuilder* result_builder) const {$/;"	f	class:double_conversion::DoubleToStringConverter
ToShortestIeeeNumber	src/fermat/common/double-conversion/double-conversion.cc	/^bool DoubleToStringConverter::ToShortestIeeeNumber($/;"	f	class:double_conversion::DoubleToStringConverter
ToShortestSingle	src/fermat/common/double-conversion/double-conversion.h	/^  bool ToShortestSingle(float value, StringBuilder* result_builder) const {$/;"	f	class:double_conversion::DoubleToStringConverter
TrimAndCut	src/fermat/common/double-conversion/strtod.cc	/^static void TrimAndCut(Vector<const char> buffer, int exponent,$/;"	f	namespace:double_conversion
TrimLeadingZeros	src/fermat/common/double-conversion/strtod.cc	/^static Vector<const char> TrimLeadingZeros(Vector<const char> buffer) {$/;"	f	namespace:double_conversion
TrimTrailingZeros	src/fermat/common/double-conversion/strtod.cc	/^static Vector<const char> TrimTrailingZeros(Vector<const char> buffer) {$/;"	f	namespace:double_conversion
TrimZeros	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static void TrimZeros(Vector<char> buffer, int* length, int* decimal_point) {$/;"	f	namespace:double_conversion
Type	src/fermat/common/format.h	/^    enum Type$/;"	g	struct:fermat::internal::Value
Type	src/fermat/common/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fermat::ArgArray
Type	src/fermat/common/format.h	/^    typedef T Type;$/;"	t	struct:fermat::internal::MakeUnsigned
Type	src/fermat/common/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fermat::internal::TypeSelector
Type	src/fermat/common/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fermat::internal::TypeSelector
TypeSelector	src/fermat/common/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fermat::internal::IntTraits
TypeSelector	src/fermat/common/format.h	/^struct TypeSelector$/;"	s	namespace:fermat::internal
TypeSelector	src/fermat/common/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fermat::internal
TypeSpec	src/fermat/common/format.h	/^struct TypeSpec: EmptySpec {$/;"	s	namespace:fermat
UINT	src/fermat/common/format.h	/^        UINT, $/;"	e	enum:fermat::internal::Value::Type
UINT64_2PART_C	src/fermat/common/double-conversion/utils.h	124;"	d
UInt128	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  UInt128() : high_bits_(0), low_bits_(0) { }$/;"	f	class:double_conversion::UInt128
UInt128	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  UInt128(uint64_t high, uint64_t low) : high_bits_(high), low_bits_(low) { }$/;"	f	class:double_conversion::UInt128
UInt128	src/fermat/common/double-conversion/fixed-dtoa.cc	/^class UInt128 {$/;"	c	namespace:double_conversion	file:
ULONG_LONG	src/fermat/common/format.h	/^        ULONG_LONG, $/;"	e	enum:fermat::internal::Value::Type
ULongLong	src/fermat/common/format.h	/^FORMAT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fermat
UNIMPLEMENTED	src/fermat/common/double-conversion/utils.h	40;"	d
UNIQUE_ZERO	src/fermat/common/double-conversion/double-conversion.h	/^    UNIQUE_ZERO = 8$/;"	e	enum:double_conversion::DoubleToStringConverter::Flags
UNREACHABLE	src/fermat/common/double-conversion/utils.h	53;"	d
UNREACHABLE	src/fermat/common/double-conversion/utils.h	55;"	d
UTF16ToUTF8	src/fermat/common/format_in.h	/^fermat::internal::UTF16ToUTF8::UTF16ToUTF8(fermat::WStringRef s)$/;"	f	class:fermat::internal::UTF16ToUTF8
UTF8ToUTF16	src/fermat/common/format_in.h	/^fermat::internal::UTF8ToUTF16::UTF8ToUTF16(fermat::StringRef s)$/;"	f	class:fermat::internal::UTF8ToUTF16
UniqueLock	src/fermat/common/mutex.h	/^    explicit UniqueLock(LOCK &l) : _owned(false), _mutex(l)$/;"	f	class:fermat::UniqueLock
UniqueLock	src/fermat/common/mutex.h	/^class UniqueLock{$/;"	c	namespace:fermat
Unsupported	src/fermat/common/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fermat::internal::WCharHelper
Unsupported	src/fermat/common/format.h	/^    typedef T Unsupported;$/;"	t	struct:fermat::internal::WCharHelper
UpperBoundary	src/fermat/common/double-conversion/ieee.h	/^  DiyFp UpperBoundary() const {$/;"	f	class:double_conversion::Double
UpperBoundary	src/fermat/common/double-conversion/ieee.h	/^  DiyFp UpperBoundary() const {$/;"	f	class:double_conversion::Single
UtcTimeVal	src/fermat/common/timestamp.h	/^    typedef int64_t UtcTimeVal;$/;"	t	class:fermat::Timestamp
Value	src/fermat/common/format.h	/^struct Value {$/;"	s	namespace:fermat::internal
Vector	src/fermat/common/double-conversion/utils.h	/^  Vector() : start_(NULL), length_(0) {}$/;"	f	class:double_conversion::Vector
Vector	src/fermat/common/double-conversion/utils.h	/^  Vector(T* data, int len) : start_(data), length_(len) {$/;"	f	class:double_conversion::Vector
Vector	src/fermat/common/double-conversion/utils.h	/^class Vector {$/;"	c	namespace:double_conversion
WArrayWriter	src/fermat/common/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WCStringRef	src/fermat/common/string_ref.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fermat
WCharHelper	src/fermat/common/format.h	/^struct WCharHelper$/;"	s	namespace:fermat::internal
WCharHelper	src/fermat/common/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fermat::internal
WHITE	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
WMemoryWriter	src/fermat/common/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WSTRING	src/fermat/common/format.h	/^        WSTRING, $/;"	e	enum:fermat::internal::Value::Type
WStringRef	src/fermat/common/string_ref.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fermat
WWriter	src/fermat/common/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fermat
WidthHandler	src/fermat/common/format_in.h	/^    explicit WidthHandler(fermat::FormatSpec &spec): _spec(spec)$/;"	f	class:fermat::__anon29::WidthHandler
WidthHandler	src/fermat/common/format_in.h	/^class WidthHandler: public fermat::internal::ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fermat::__anon29
WidthSpec	src/fermat/common/format.h	/^    WidthSpec(unsigned width, wchar_t fill) : _width(width), _fill(fill)$/;"	f	struct:fermat::WidthSpec
WidthSpec	src/fermat/common/format.h	/^struct WidthSpec {$/;"	s	namespace:fermat
Writer	src/fermat/common/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fermat
YELLOW	src/fermat/common/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
Yes	src/fermat/common/format.h	/^typedef char Yes[1];$/;"	t	namespace:fermat::internal
Zero	src/fermat/common/double-conversion/bignum.cc	/^void Bignum::Zero() {$/;"	f	class:double_conversion::Bignum
_actual	src/fermat/common/cmdline.h	/^        T           _actual;$/;"	m	class:fermat::CmdParser::option_with_value
_align	src/fermat/common/format.h	/^    Alignment _align;$/;"	m	struct:fermat::AlignSpec
_arg	src/fermat/common/format_in.h	/^    fermat::internal::Arg &_arg;$/;"	m	class:fermat::__anon29::ArgConverter
_arg	src/fermat/common/format_in.h	/^    fermat::internal::Arg &_arg;$/;"	m	class:fermat::__anon29::CharConverter
_args	src/fermat/common/format.h	/^        const internal::Arg    *_args;$/;"	m	union:fermat::ArgList::__anon25
_args	src/fermat/common/format.h	/^    ArgList _args;$/;"	m	class:fermat::internal::FormatterBase
_base_name	src/fermat/common/log_async.h	/^    std::string                      _base_name;$/;"	m	class:fermat::LogAsync
_base_name	src/fermat/common/log_file.h	/^    const std::string                  _base_name;$/;"	m	class:fermat::LogFile
_basename	src/fermat/common/logging.h	/^        SourceFile   _basename;$/;"	m	class:fermat::Logging::Impl
_beg	src/fermat/common/numeric_string.h	/^		const char* _beg;$/;"	m	class:fermat::Impl::Ptr
_buffer	src/fermat/common/format.h	/^        : BasicWriter<Char>(_buffer), _buffer(array, SIZE)$/;"	f	class:BasicArrayWriter
_buffer	src/fermat/common/format.h	/^    BasicBuffer<Char>  &_buffer;$/;"	m	class:fermat::FormatBuf
_buffer	src/fermat/common/format.h	/^    BasicBuffer<Char> &_buffer;$/;"	m	class:BasicWriter
_buffer	src/fermat/common/format.h	/^    StackBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> _buffer;$/;"	m	class:BasicMemoryWriter
_buffer	src/fermat/common/format.h	/^    internal::FixedBuffer<Char> _buffer;$/;"	m	class:BasicArrayWriter
_buffer	src/fermat/common/format.h	/^    mutable char  _buffer[BUFFER_SIZE];$/;"	m	class:FormatInt
_buffer	src/fermat/common/log_stream.h	/^    Buffer _buffer;$/;"	m	class:fermat::LogStream
_buffer	src/fermat/common/sequence_write_file.h	/^    char         _buffer[kTempBuffSize];$/;"	m	class:fermat::SequenceWriteFile
_buffers	src/fermat/common/log_async.h	/^    BufferVector                     _buffers;$/;"	m	class:fermat::LogAsync
_capacity	src/fermat/common/basic_buffer.h	/^    std::size_t    _capacity;$/;"	m	class:fermat::BasicBuffer
_check_size	src/fermat/common/log_file.h	/^    const int                          _check_size;$/;"	m	class:fermat::LogFile
_clock	src/fermat/common/clock.h	/^    ClockVal _clock;$/;"	m	class:fermat::Clock
_cond	src/fermat/common/cond.h	/^    pthread_cond_t _cond;$/;"	m	class:fermat::Cond
_cond	src/fermat/common/log_async.h	/^    Cond                             _cond;$/;"	m	class:fermat::LogAsync
_cond	src/fermat/common/shared_state.h	/^	Cond       _cond;$/;"	m	class:fermat::SharedState
_count	src/fermat/common/log_file.h	/^    int                                _count;$/;"	m	class:fermat::LogFile
_cur	src/fermat/common/numeric_string.h	/^		char*       _cur;$/;"	m	class:fermat::Impl::Ptr
_current_buffer	src/fermat/common/log_async.h	/^    BufferPtr                        _current_buffer;$/;"	m	class:fermat::LogAsync
_data	src/fermat/common/logging.h	/^        const char* _data;$/;"	m	class:fermat::Logging::SourceFile
_data	src/fermat/common/stack_buffer.h	/^    T _data[SIZE];$/;"	m	class:fermat::StackBuffer
_data	src/fermat/common/string_ref.h	/^    const Char   *_data;$/;"	m	class:fermat::BasicStringRef
_data	src/fermat/common/string_ref.h	/^    const Char *_data;$/;"	m	class:fermat::BasicCStringRef
_def	src/fermat/common/cmdline.h	/^        T           _def;$/;"	m	class:fermat::CmdParser::option_with_value
_desc	src/fermat/common/cmdline.h	/^        std::string _desc;$/;"	m	class:fermat::CmdParser::option_with_value
_desc	src/fermat/common/cmdline.h	/^        std::string _desc;$/;"	m	class:fermat::CmdParser::option_without_value
_ecvt_s	src/fermat/common/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fermat::internal
_elapsed	src/fermat/common/stop_watcher.h	/^	Clock::ClockDiff   _elapsed;$/;"	m	class:fermat::StopWatcher
_end	src/fermat/common/numeric_string.h	/^		const char* _end;$/;"	m	class:fermat::Impl::Ptr
_error_code	src/fermat/common/format.h	/^    int _error_code;$/;"	m	class:SystemError
_file	src/fermat/common/log_file.h	/^    std::shared_ptr<SequenceWriteFile> _file;$/;"	m	class:fermat::LogFile
_file_name	src/fermat/common/sequence_write_file.h	/^    std::string  _file_name;$/;"	m	class:fermat::SequenceWriteFile
_fill	src/fermat/common/format.h	/^    wchar_t _fill;$/;"	m	struct:fermat::WidthSpec
_finite	src/fermat/common/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fermat::internal
_flags	src/fermat/common/format.h	/^    unsigned  _flags;$/;"	m	struct:fermat::FormatSpec
_flush_interval	src/fermat/common/log_async.h	/^    const int                        _flush_interval;$/;"	m	class:fermat::LogAsync
_flush_step	src/fermat/common/log_file.h	/^    const int                          _flush_step;$/;"	m	class:fermat::LogFile
_format	src/fermat/common/format.h	/^    const Char            *_format;$/;"	m	class:fermat::internal::BasicArgFormatter
_formatter	src/fermat/common/format.h	/^    BasicFormatter<Char>  &_formatter;$/;"	m	class:fermat::internal::BasicArgFormatter
_fp	src/fermat/common/sequence_write_file.h	/^    FILE        *_fp;$/;"	m	class:fermat::SequenceWriteFile
_functor	src/fermat/common/thread.cc	/^		Thread::ThreadFactor  _functor;$/;"	m	class:fermat::FunctorRunnable	file:
_has	src/fermat/common/cmdline.h	/^        bool        _has;$/;"	m	class:fermat::CmdParser::option_with_value
_has	src/fermat/common/cmdline.h	/^        bool        _has;$/;"	m	class:fermat::CmdParser::option_without_value
_high	src/fermat/common/cmdline.h	/^    T _high;$/;"	m	struct:fermat::range_reader
_id	src/fermat/common/thread.h	/^	int64_t                   _id;$/;"	m	class:fermat::Thread
_impl	src/fermat/common/logging.h	/^    Impl       _impl;$/;"	m	class:fermat::Logging
_instance	src/fermat/common/singleton.h	/^    static volatile_instance_pointer _instance;$/;"	m	class:fermat::Singleton
_instance	src/fermat/common/singleton.h	/^typename Singleton<Instance, destroy_on_exit>::volatile_instance_pointer Singleton<Instance, destroy_on_exit>::_instance = NULL;$/;"	m	class:fermat::Singleton
_is_running	src/fermat/common/log_async.h	/^    bool                             _is_running;$/;"	m	class:fermat::LogAsync
_isnan	src/fermat/common/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fermat::internal
_last_flush	src/fermat/common/log_file.h	/^    Timestamp                          _last_flush;$/;"	m	class:fermat::LogFile
_last_roll	src/fermat/common/log_file.h	/^    Timestamp                          _last_roll;$/;"	m	class:fermat::LogFile
_len	src/fermat/common/logging.cc	/^  const unsigned _len;$/;"	m	class:fermat::T	file:
_level	src/fermat/common/logging.h	/^        LogLevel     _level;$/;"	m	class:fermat::Logging::Impl
_line	src/fermat/common/logging.h	/^        int          _line;$/;"	m	class:fermat::Logging::Impl
_lock	src/fermat/common/mutex.h	/^    LOCK& _lock;$/;"	m	class:fermat::ScopedLock
_log_name	src/fermat/common/logging.h	/^    std::string  _log_name;$/;"	m	class:fermat::LogOutput
_low	src/fermat/common/cmdline.h	/^    T _low;$/;"	m	struct:fermat::range_reader
_map	src/fermat/common/env.cc	/^std::map<std::string, std::string> _map;$/;"	m	namespace:fermat	file:
_map	src/fermat/common/format.h	/^    MapType  _map;$/;"	m	class:fermat::internal::ArgMap
_map	src/fermat/common/format.h	/^    internal::ArgMap<Char>   _map;$/;"	m	class:fermat::BasicFormatter
_msg	src/fermat/common/cmdline.h	/^    std::string _msg;$/;"	m	class:fermat::cmdline_error
_mutex	src/fermat/common/log_async.h	/^    Mutex                            _mutex;$/;"	m	class:fermat::LogAsync
_mutex	src/fermat/common/log_file.h	/^    MUTEX                              _mutex;$/;"	m	class:fermat::LogFile
_mutex	src/fermat/common/mutex.h	/^    Mutex  &_mutex;$/;"	m	class:fermat::UniqueLock
_mutex	src/fermat/common/mutex.h	/^    pthread_mutex_t _mutex; $/;"	m	class:fermat::TimedMutex
_mutex	src/fermat/common/mutex.h	/^    pthread_mutex_t _mutex;$/;"	m	class:fermat::Mutex
_mutex	src/fermat/common/shared_state.h	/^	Mutex      _mutex;$/;"	m	class:fermat::SharedState
_mutex	src/fermat/common/thread.h	/^	mutable Mutex             _mutex;$/;"	m	class:fermat::Thread
_nam	src/fermat/common/cmdline.h	/^        std::string _nam;$/;"	m	class:fermat::CmdParser::option_with_value
_nam	src/fermat/common/cmdline.h	/^        std::string _nam;$/;"	m	class:fermat::CmdParser::option_without_value
_name	src/fermat/common/thread.h	/^	std::string               _name;$/;"	m	class:fermat::Thread
_need	src/fermat/common/cmdline.h	/^        bool        _need;$/;"	m	class:fermat::CmdParser::option_with_value
_next_arg_index	src/fermat/common/format.h	/^    int _next_arg_index;$/;"	m	class:fermat::internal::FormatterBase
_next_buffer	src/fermat/common/log_async.h	/^    BufferPtr                        _next_buffer;$/;"	m	class:fermat::LogAsync
_owned	src/fermat/common/mutex.h	/^    bool    _owned;$/;"	m	class:fermat::UniqueLock
_precision	src/fermat/common/format.h	/^    int       _precision;$/;"	m	struct:fermat::FormatSpec
_ptr	src/fermat/common/basic_buffer.h	/^    T             *_ptr;$/;"	m	class:fermat::BasicBuffer
_roll_size	src/fermat/common/log_async.h	/^    size_t                           _roll_size;$/;"	m	class:fermat::LogAsync
_roll_size	src/fermat/common/log_file.h	/^    const size_t                       _roll_size;$/;"	m	class:fermat::LogFile
_running	src/fermat/common/stop_watcher.h	/^	bool              _running;$/;"	m	class:fermat::StopWatcher
_size	src/fermat/common/basic_buffer.h	/^    std::size_t    _size;$/;"	m	class:fermat::BasicBuffer
_size	src/fermat/common/logging.h	/^        size_t      _size;$/;"	m	class:fermat::Logging::SourceFile
_size	src/fermat/common/string_ref.h	/^    std::size_t   _size;$/;"	m	class:fermat::BasicStringRef
_sleepState	src/fermat/common/thread.h	/^	SharedState<int>          _sleepState;$/;"	m	class:fermat::Thread
_snam	src/fermat/common/cmdline.h	/^        char        _snam;$/;"	m	class:fermat::CmdParser::option_with_value
_snam	src/fermat/common/cmdline.h	/^        char        _snam;$/;"	m	class:fermat::CmdParser::option_without_value
_span	src/fermat/common/timespan.h	/^    TimeDiff  _span;$/;"	m	class:fermat::Timespan
_spec	src/fermat/common/format.h	/^    FormatSpec        &_spec;$/;"	m	class:fermat::internal::ArgFormatterBase
_spec	src/fermat/common/format_in.h	/^    fermat::FormatSpec &_spec;$/;"	m	class:fermat::__anon29::WidthHandler
_start	src/fermat/common/format.h	/^    Char               *_start;$/;"	m	class:fermat::FormatBuf
_start	src/fermat/common/stop_watcher.h	/^	Clock              _start;$/;"	m	class:fermat::StopWatcher
_state	src/fermat/common/log_async.h	/^    SharedState<int>                 _state;$/;"	m	class:fermat::LogAsync
_str	src/fermat/common/format.h	/^    char         *_str;$/;"	m	class:FormatInt
_str	src/fermat/common/format.h	/^    const Char *_str;$/;"	m	class:fermat::StrFormatSpec
_str	src/fermat/common/logging.cc	/^  const char*    _str;$/;"	m	class:fermat::T	file:
_stream	src/fermat/common/logging.h	/^        LogStream    _stream;$/;"	m	class:fermat::Logging::Impl
_thread	src/fermat/common/log_async.h	/^    Thread                           _thread;$/;"	m	class:fermat::LogAsync
_threadData	src/fermat/common/thread.h	/^	ThreadDataPtr             _threadData;$/;"	m	class:fermat::Thread
_time	src/fermat/common/logging.h	/^        Timestamp    _time;$/;"	m	class:fermat::Logging::Impl
_ts	src/fermat/common/timestamp.h	/^    TimeVal    _ts;$/;"	m	class:fermat::Timestamp
_type	src/fermat/common/format.h	/^    char      _type;$/;"	m	struct:fermat::FormatSpec
_type	src/fermat/common/format_in.h	/^    wchar_t                _type;$/;"	m	class:fermat::__anon29::ArgConverter
_types	src/fermat/common/format.h	/^    uint64_t _types;$/;"	m	class:fermat::ArgList
_value	src/fermat/common/format.h	/^    T _value;$/;"	m	class:fermat::IntFormatSpec
_value	src/fermat/common/shared_state.h	/^	value_type _value;$/;"	m	class:fermat::SharedState
_values	src/fermat/common/format.h	/^        const internal::Value  *_values;$/;"	m	union:fermat::ArgList::__anon25
_width	src/fermat/common/format.h	/^    unsigned _width;$/;"	m	struct:fermat::WidthSpec
_write_size	src/fermat/common/sequence_write_file.h	/^    size_t       _write_size;$/;"	m	class:fermat::SequenceWriteFile
_writer	src/fermat/common/format.h	/^    BasicWriter<Char>       &_writer;$/;"	m	class:fermat::BasicFormatter
_writer	src/fermat/common/format.h	/^    BasicWriter<Char> &_writer;$/;"	m	class:fermat::internal::ArgFormatterBase
abort_noreturn	src/fermat/common/double-conversion/utils.h	/^inline void abort_noreturn() { abort(); }$/;"	f
accuracy	src/fermat/common/clock.cc	/^Clock::ClockDiff Clock::accuracy()$/;"	f	class:fermat::Clock
add	src/fermat/common/cmdline.h	/^    void add(const T &v){ alt.push_back(v); }$/;"	f	struct:fermat::oneof_reader
add	src/fermat/common/cmdline.h	/^    void add(const std::string &name,$/;"	f	class:fermat::CmdParser
align	src/fermat/common/format.h	/^    Alignment align() const$/;"	f	struct:fermat::AlignSpec
align	src/fermat/common/format.h	/^    Alignment align() const$/;"	f	struct:fermat::TypeSpec
alt	src/fermat/common/cmdline.h	/^    std::vector<T> alt;$/;"	m	struct:fermat::oneof_reader
append	src/fermat/common/basic_buffer.h	/^void BasicBuffer<T>::append(const U *begin, const U *end)$/;"	f	class:fermat::BasicBuffer
append	src/fermat/common/basic_buffer.h	/^void BasicBuffer<T>::append(const U *begin, size_t len)$/;"	f	class:fermat::BasicBuffer
append	src/fermat/common/log_file.h	/^inline void LogFile<MUTEX>::append(const char* line, size_t len)$/;"	f	class:fermat::LogFile
append	src/fermat/common/log_file.h	/^inline void LogFile<MUTEX>::append(const std::string &line)$/;"	f	class:fermat::LogFile
append	src/fermat/common/log_stream.h	/^    void append(const char* data, size_t len)$/;"	f	class:fermat::LogStream
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, const void* ptr)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, double value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, double value, int precision)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, double value, int width, int precision)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, float value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, float value, int precision)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, float value, int width, int precision)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, int value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, int value, int width)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, int64_t value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, int64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, uint64_t value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, uint64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, unsigned value)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append(std::string& str, unsigned value, int width)$/;"	f	class:fermat::NumberFormatter
append	src/fermat/common/sequence_write_file.cc	/^bool SequenceWriteFile::append(const char* content, const size_t len)$/;"	f	class:fermat::SequenceWriteFile
append0	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append0(std::string& str, int value, int width)$/;"	f	class:fermat::NumberFormatter
append0	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append0(std::string& str, int64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append0	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append0(std::string& str, uint64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append0	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append0(std::string& str, unsigned int value, int width)$/;"	f	class:fermat::NumberFormatter
append_float_length	src/fermat/common/format.h	/^    void append_float_length(Char *&, T)$/;"	f	class:BasicWriter
append_float_length	src/fermat/common/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, int value)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, int value, int width)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, int64_t value)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, int64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, uint64_t value)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, uint64_t value, int width)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, unsigned value)$/;"	f	class:fermat::NumberFormatter
append_hex	src/fermat/common/numeric_formatter.cc	/^void NumberFormatter::append_hex(std::string& str, unsigned value, int width)$/;"	f	class:fermat::NumberFormatter
append_int	src/fermat/common/log_stream.h	/^    void append_int(T value) $/;"	f	class:fermat::LogStream
append_unlock	src/fermat/common/log_file.h	/^inline void LogFile<MUTEX>::append_unlock(const char* logline, size_t len)$/;"	f	class:fermat::LogFile
arg	src/fermat/common/format.h	/^inline internal::NamedArg<char> arg(StringRef name, const T &arg)$/;"	f
arg	src/fermat/common/format.h	/^inline internal::NamedArg<wchar_t> arg(WStringRef name, const T &arg)$/;"	f
args	src/fermat/common/format.h	/^    const ArgList &args() const$/;"	f	class:fermat::internal::FormatterBase
assign	src/fermat/common/timespan.h	/^inline Timespan& Timespan::assign(int day, int hour, int min, int sec, int microSec)$/;"	f	class:fermat::Timespan
assign	src/fermat/common/timespan.h	/^inline Timespan& Timespan::assign(long sec, long microSec)$/;"	f	class:fermat::Timespan
atoi	src/fermat/common/numeric_parser.cc	/^bool NumberParser::atoi(const std::string& s, int64_t& value)$/;"	f	class:fermat::NumberParser
atoix	src/fermat/common/numeric_parser.cc	/^bool NumberParser::atoix(const std::string &s, int64_t &value)$/;"	f	class:fermat::NumberParser
bigits_	src/fermat/common/double-conversion/bignum.h	/^  Vector<Chunk> bigits_;$/;"	m	class:double_conversion::Bignum
bigits_buffer_	src/fermat/common/double-conversion/bignum.h	/^  Chunk bigits_buffer_[kBigitCapacity];$/;"	m	class:double_conversion::Bignum
binary_exponent	src/fermat/common/double-conversion/cached-powers.cc	/^  int16_t binary_exponent;$/;"	m	struct:double_conversion::CachedPower	file:
broadcast	src/fermat/common/cond.cc	/^void Cond::broadcast()$/;"	f	class:fermat::Cond
buffer	src/fermat/common/log_stream.h	/^    const Buffer& buffer() const { return _buffer; }$/;"	f	class:fermat::LogStream
buffer_	src/fermat/common/double-conversion/utils.h	/^  Vector<char> buffer_;$/;"	m	class:double_conversion::StringBuilder
bzero	src/fermat/common/basic_buffer.h	/^    void bzero()$/;"	f	class:fermat::BasicBuffer
c_s	src/fermat/common/ascii.cc	/^static const int c_s = static_cast<int>(AsciiType::eControl) | $/;"	m	namespace:fermat	file:
c_str	src/fermat/common/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	src/fermat/common/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	src/fermat/common/string_ref.h	/^    const Char *c_str() const$/;"	f	class:fermat::BasicCStringRef
cache_thread_id	src/fermat/common/this_thread.cc	/^void cache_thread_id()$/;"	f	namespace:fermat::this_thread
capacity	src/fermat/common/basic_buffer.h	/^    std::size_t capacity() const$/;"	f	class:fermat::BasicBuffer
cast	src/fermat/common/cmdline.h	/^    static Target cast(const Source &arg)$/;"	f	class:fermat::detail::lexical_cast_t
cast	src/fermat/common/cmdline.h	/^    static Target cast(const std::string &arg)$/;"	f	class:fermat::detail::lexical_cast_t
cast	src/fermat/common/cmdline.h	/^    static std::string cast(const Source &arg)$/;"	f	class:fermat::detail::lexical_cast_t
cast	src/fermat/common/format.h	/^    static Char cast(int value)$/;"	f	class:fermat::internal::BasicCharTraits
cat	src/fermat/common/string.h	/^S cat(const S& delim, const It& begin, const It& end)$/;"	f	namespace:fermat
cat	src/fermat/common/string.h	/^S cat(const S& s1, const S& s2)$/;"	f	namespace:fermat
cat	src/fermat/common/string.h	/^S cat(const S& s1, const S& s2, const S& s3)$/;"	f	namespace:fermat
cat	src/fermat/common/string.h	/^S cat(const S& s1, const S& s2, const S& s3, const S& s4)$/;"	f	namespace:fermat
cat	src/fermat/common/string.h	/^S cat(const S& s1, const S& s2, const S& s3, const S& s4, const S& s5)$/;"	f	namespace:fermat
cat	src/fermat/common/string.h	/^S cat(const S& s1, const S& s2, const S& s3, const S& s4, const S& s5, const S& s6)$/;"	f	namespace:fermat
check	src/fermat/common/cmdline.h	/^    void check(int argc, bool ok)$/;"	f	class:fermat::CmdParser
check	src/fermat/common/format.h	/^inline T check(T value)$/;"	f	namespace:fermat::internal
check	src/fermat/common/numeric_string.h	/^		void check(char* ptr)$/;"	f	class:fermat::Impl::Ptr
check_no_auto_index	src/fermat/common/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fermat::internal::FormatterBase
clear	src/fermat/common/basic_buffer.h	/^    void clear()$/;"	f	class:fermat::BasicBuffer
clear	src/fermat/common/string_ref.h	/^    void clear() $/;"	f	class:fermat::BasicStringRef
cmdline_error	src/fermat/common/cmdline.h	/^    cmdline_error(const std::string &msg): _msg(msg){}$/;"	f	class:fermat::cmdline_error
cmdline_error	src/fermat/common/cmdline.h	/^class cmdline_error : public std::exception {$/;"	c	namespace:fermat
compare	src/fermat/common/string_ref.h	/^    int compare(const BasicStringRef& other) const$/;"	f	class:fermat::BasicStringRef
convert	src/fermat/common/format.h	/^    static char convert(char value)$/;"	f	class:fermat::internal::CharTraits
convert	src/fermat/common/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fermat::internal::CharTraits
convert	src/fermat/common/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fermat::internal::CharTraits
convert	src/fermat/common/format_in.h	/^int fermat::internal::UTF16ToUTF8::convert(fermat::WStringRef s)$/;"	f	class:fermat::internal::UTF16ToUTF8
count_digits	src/fermat/common/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fermat::internal
create_instance	src/fermat/common/singleton.h	/^Singleton<Instance, destroy_on_exit>::create_instance() $/;"	f	class:fermat::Singleton
current	src/fermat/common/thread.cc	/^Thread* Thread::current()$/;"	f	class:fermat::Thread
current_thread_ptr	src/fermat/common/thread.cc	/^	__thread fermat::Thread *current_thread_ptr = NULL;$/;"	m	namespace:fermat::detail	file:
custom	src/fermat/common/format.h	/^        CustomValue                 custom;$/;"	m	union:fermat::internal::Value::__anon16
d32_	src/fermat/common/double-conversion/ieee.h	/^  const uint32_t d32_;$/;"	m	class:double_conversion::Single
d64_	src/fermat/common/double-conversion/ieee.h	/^  const uint64_t d64_;$/;"	m	class:double_conversion::Double
data	src/fermat/common/basic_buffer.h	/^    const T* data() const$/;"	f	class:fermat::BasicBuffer
data	src/fermat/common/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	src/fermat/common/format.h	/^    int data[2];$/;"	m	struct:fermat::internal::DummyInt
data	src/fermat/common/string_ref.h	/^    const Char *data() const$/;"	f	class:fermat::BasicStringRef
data_time	src/fermat/common/timestamp.cc	/^std::string Timestamp::data_time()$/;"	f	class:fermat::Timestamp
days	src/fermat/common/timespan.h	/^inline int Timespan::days() const $/;"	f	class:fermat::Timespan
deallocate	src/fermat/common/stack_buffer.h	/^    void deallocate()$/;"	f	class:fermat::StackBuffer
decimal_exponent	src/fermat/common/double-conversion/cached-powers.cc	/^  int16_t decimal_exponent;$/;"	m	struct:double_conversion::CachedPower	file:
decimal_in_shortest_high_	src/fermat/common/double-conversion/double-conversion.h	/^  const int decimal_in_shortest_high_;$/;"	m	class:double_conversion::DoubleToStringConverter
decimal_in_shortest_low_	src/fermat/common/double-conversion/double-conversion.h	/^  const int decimal_in_shortest_low_;$/;"	m	class:double_conversion::DoubleToStringConverter
decimal_separator	src/fermat/common/numeric_string.h	/^inline char decimal_separator()$/;"	f	namespace:fermat
default_reader	src/fermat/common/cmdline.h	/^struct default_reader$/;"	s	namespace:fermat
default_value	src/fermat/common/cmdline.h	/^std::string default_value(T def)$/;"	f	namespace:fermat::detail
demangle	src/fermat/common/cmdline.h	/^static inline std::string demangle(const std::string &name)$/;"	f	namespace:fermat::detail
description	src/fermat/common/cmdline.h	/^        const std::string &description() const $/;"	f	class:fermat::CmdParser::option_with_value
description	src/fermat/common/cmdline.h	/^        const std::string &description() const $/;"	f	class:fermat::CmdParser::option_without_value
destroy_instance	src/fermat/common/singleton.h	/^void Singleton<Instance, destroy_on_exit>::destroy_instance() $/;"	f	class:fermat::Singleton
detail	src/fermat/common/cmdline.h	/^namespace detail{$/;"	n	namespace:fermat
detail	src/fermat/common/numeric_string.cc	/^namespace detail {$/;"	n	namespace:fermat	file:
detail	src/fermat/common/thread.cc	/^namespace detail {$/;"	n	namespace:fermat	file:
do_get_arg	src/fermat/common/format_in.h	/^Arg fermat::internal::FormatterBase::do_get_arg($/;"	f	class:fermat::internal::FormatterBase
double_conversion	src/fermat/common/double-conversion/bignum-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/bignum-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/bignum.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/bignum.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/cached-powers.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/cached-powers.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/diy-fp.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/diy-fp.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/double-conversion.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/double-conversion.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/fast-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/fast-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/fixed-dtoa.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/fixed-dtoa.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/ieee.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/strtod.cc	/^namespace double_conversion {$/;"	n	file:
double_conversion	src/fermat/common/double-conversion/strtod.h	/^namespace double_conversion {$/;"	n
double_conversion	src/fermat/common/double-conversion/utils.h	/^namespace double_conversion {$/;"	n
double_to_fixed_str	src/fermat/common/numeric_string.cc	/^std::string& double_to_fixed_str(std::string& str, double value, int precision, int width, char thSep, char decSep)$/;"	f	namespace:fermat
double_to_fixed_str	src/fermat/common/numeric_string.cc	/^void double_to_fixed_str(char* buffer, int bufferSize, double value, int precision)$/;"	f	namespace:fermat
double_to_str	src/fermat/common/numeric_string.cc	/^std::string& double_to_str(std::string& str, double value, int precision, int width, char thSep, char decSep)$/;"	f	namespace:fermat
double_to_str	src/fermat/common/numeric_string.cc	/^void double_to_str(char* buffer, int bufferSize, double value, int lowDec, int highDec)$/;"	f	namespace:fermat
double_to_uint64	src/fermat/common/double-conversion/ieee.h	/^static uint64_t double_to_uint64(double d) { return BitCast<uint64_t>(d); }$/;"	f	namespace:double_conversion
double_value	src/fermat/common/format.h	/^        double                      double_value;$/;"	m	union:fermat::internal::Value::__anon16
e	src/fermat/common/double-conversion/diy-fp.h	/^  int e() const { return e_; }$/;"	f	class:double_conversion::DiyFp
eAlpha	src/fermat/common/ascii.h	/^    eAlpha    = 0x0020,$/;"	m	class:fermat::AsciiType
eControl	src/fermat/common/ascii.h	/^    eControl  = 0x0001,$/;"	m	class:fermat::AsciiType
eDEBUG	src/fermat/common/logging.h	/^        eDEBUG,$/;"	e	enum:fermat::Logging::LogLevel
eDigit	src/fermat/common/ascii.h	/^    eDigit    = 0x0008,$/;"	m	class:fermat::AsciiType
eERROR	src/fermat/common/logging.h	/^        eERROR,$/;"	e	enum:fermat::Logging::LogLevel
eFATAL	src/fermat/common/logging.h	/^        eFATAL,$/;"	e	enum:fermat::Logging::LogLevel
eFmtTrueFalse	src/fermat/common/numeric_formatter.h	/^    eFmtTrueFalse,$/;"	m	class:fermat::BoolFormat
eFmtYesNo	src/fermat/common/numeric_formatter.h	/^    eFmtYesNo,$/;"	m	class:fermat::BoolFormat
eGraph	src/fermat/common/ascii.h	/^    eGraph    = 0x0100,$/;"	m	class:fermat::AsciiType
eHexDigit	src/fermat/common/ascii.h	/^    eHexDigit = 0x0010,$/;"	m	class:fermat::AsciiType
eINFO	src/fermat/common/logging.h	/^        eINFO,$/;"	e	enum:fermat::Logging::LogLevel
eLowwer	src/fermat/common/ascii.h	/^    eLowwer   = 0x0040,$/;"	m	class:fermat::AsciiType
eNUM_LOG_LEVELS	src/fermat/common/logging.h	/^        eNUM_LOG_LEVELS$/;"	e	enum:fermat::Logging::LogLevel
eNone	src/fermat/common/ascii.h	/^    eNone     = 0x0000,$/;"	m	class:fermat::AsciiType
ePrint	src/fermat/common/ascii.h	/^    ePrint    = 0x0200$/;"	m	class:fermat::AsciiType
ePunct	src/fermat/common/ascii.h	/^    ePunct    = 0x0004,$/;"	m	class:fermat::AsciiType
eSpace	src/fermat/common/ascii.h	/^    eSpace    = 0x0002,$/;"	m	class:fermat::AsciiType
eTRACE	src/fermat/common/logging.h	/^        eTRACE,$/;"	e	enum:fermat::Logging::LogLevel
eUpper	src/fermat/common/ascii.h	/^    eUpper    = 0x0080,$/;"	m	class:fermat::AsciiType
eWARN	src/fermat/common/logging.h	/^        eWARN,$/;"	e	enum:fermat::Logging::LogLevel
e_	src/fermat/common/double-conversion/diy-fp.h	/^  int e_;$/;"	m	class:double_conversion::DiyFp
elapsed	src/fermat/common/clock.h	/^inline Clock::ClockDiff Clock::elapsed() const$/;"	f	class:fermat::Clock
elapsed	src/fermat/common/stop_wathcer.cc	/^Clock::ClockDiff StopWatcher::elapsed() const$/;"	f	class:fermat::StopWatcher
elapsed	src/fermat/common/timestamp.h	/^inline Timestamp::TimeDiff Timestamp::elapsed() const$/;"	f	class:fermat::Timestamp
elapsed_seconds	src/fermat/common/stop_watcher.h	/^inline int StopWatcher::elapsed_seconds() const$/;"	f	class:fermat::StopWatcher
empty	src/fermat/common/string_ref.h	/^    bool empty()$/;"	f	class:fermat::BasicStringRef
empty_string_value_	src/fermat/common/double-conversion/double-conversion.h	/^  const double empty_string_value_;$/;"	m	class:double_conversion::StringToDoubleConverter
enable_conversion	src/fermat/common/format.h	/^        enable_conversion = sizeof(convert(get<T>())) == sizeof(Yes)$/;"	e	enum:fermat::internal::ConvertToInt::__anon21
error	src/fermat/common/cmdline.h	/^    std::string error() const$/;"	f	class:fermat::CmdParser
error_code	src/fermat/common/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_full	src/fermat/common/cmdline.h	/^    std::string error_full() const$/;"	f	class:fermat::CmdParser
errors	src/fermat/common/cmdline.h	/^    std::vector<std::string> errors;$/;"	m	class:fermat::CmdParser
event	src/fermat/common/thread.cc	/^		SharedState<int>          event;$/;"	m	class:fermat::Thread::ThreadData	file:
exact_powers_of_ten	src/fermat/common/double-conversion/strtod.cc	/^static const double exact_powers_of_ten[] = {$/;"	m	namespace:double_conversion	file:
exist	src/fermat/common/cmdline.h	/^    bool exist(const std::string &name) const $/;"	f	class:fermat::CmdParser
exit	src/fermat/common/this_thread.cc	/^void exit()$/;"	f	namespace:fermat::this_thread
exponent_	src/fermat/common/double-conversion/bignum.h	/^  int exponent_;$/;"	m	class:double_conversion::Bignum
exponent_character_	src/fermat/common/double-conversion/double-conversion.h	/^  const char exponent_character_;$/;"	m	class:double_conversion::DoubleToStringConverter
f	src/fermat/common/double-conversion/diy-fp.h	/^  uint64_t f() const { return f_; }$/;"	f	class:double_conversion::DiyFp
f_	src/fermat/common/double-conversion/diy-fp.h	/^  uint64_t f_;$/;"	m	class:double_conversion::DiyFp
fermat	src/fermat/common/ascii.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/ascii.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/basic_buffer.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/clock.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/clock.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/cmdline.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/cond.cc	/^namespace fermat{$/;"	n	file:
fermat	src/fermat/common/cond.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/env.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/env.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/format.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/format.h	/^namespace fermat{$/;"	n
fermat	src/fermat/common/format_in.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/log_async.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/log_async.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/log_file.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/log_file.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/log_stream.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/log_stream.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/logging.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/logging.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/mutex.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/mutex.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/numeric_formatter.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/numeric_formatter.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/numeric_parser.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/numeric_parser.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/numeric_string.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/numeric_string.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/runnable.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/runnable.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/sequence_write_file.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/sequence_write_file.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/shared_state.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/singleton.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/stack_buffer.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/stop_watcher.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/stop_wathcer.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/string.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/string_ref.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/this_thread.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/this_thread.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/thread.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/thread.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/timespan.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/timespan.h	/^namespace fermat {$/;"	n
fermat	src/fermat/common/timestamp.cc	/^namespace fermat {$/;"	n	file:
fermat	src/fermat/common/timestamp.h	/^namespace fermat {$/;"	n
fill	src/fermat/common/format.h	/^    char fill() const$/;"	f	struct:fermat::TypeSpec
fill	src/fermat/common/format.h	/^    wchar_t fill() const$/;"	f	struct:fermat::WidthSpec
fill_padding	src/fermat/common/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
find	src/fermat/common/format.h	/^    const internal::Arg* find(const fermat::BasicStringRef<Char> &name) const$/;"	f	class:fermat::internal::ArgMap
finish	src/fermat/common/logging.cc	/^void Logging::Impl::finish()$/;"	f	class:fermat::Logging::Impl
first	src/fermat/common/double-conversion/utils.h	/^  T& first() { return start_[0]; }$/;"	f	class:double_conversion::Vector
fits_in_int	src/fermat/common/format_in.h	/^    static bool fits_in_int(T value)$/;"	f	struct:fermat::__anon29::IntChecker
fits_in_int	src/fermat/common/format_in.h	/^    static bool fits_in_int(bool)$/;"	f	struct:fermat::__anon29::IntChecker
fits_in_int	src/fermat/common/format_in.h	/^    static bool fits_in_int(int)$/;"	f	struct:fermat::__anon29::IntChecker
flag	src/fermat/common/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fermat::FormatSpec
flag	src/fermat/common/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fermat::AlignTypeSpec
flag	src/fermat/common/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fermat::TypeSpec
flags_	src/fermat/common/double-conversion/double-conversion.h	/^  const int flags_;$/;"	m	class:double_conversion::DoubleToStringConverter
flags_	src/fermat/common/double-conversion/double-conversion.h	/^  const int flags_;$/;"	m	class:double_conversion::StringToDoubleConverter
float_to_fixed_str	src/fermat/common/numeric_string.cc	/^std::string& float_to_fixed_str(std::string& str, float value, int precision, int width, char thSep, char decSep)$/;"	f	namespace:fermat
float_to_fixed_str	src/fermat/common/numeric_string.cc	/^void float_to_fixed_str(char* buffer, int bufferSize, float value, int precision)$/;"	f	namespace:fermat
float_to_str	src/fermat/common/numeric_string.cc	/^std::string& float_to_str(std::string& str, float value, int precision, int width, char thSep, char decSep)$/;"	f	namespace:fermat
float_to_str	src/fermat/common/numeric_string.cc	/^void float_to_str(char* buffer, int bufferSize, float value, int lowDec, int highDec)$/;"	f	namespace:fermat
float_to_uint32	src/fermat/common/double-conversion/ieee.h	/^static uint32_t float_to_uint32(float f) { return BitCast<uint32_t>(f); }$/;"	f	namespace:double_conversion
flush	src/fermat/common/log_async.cc	/^void LogAsync::flush()$/;"	f	class:fermat::LogAsync
flush	src/fermat/common/log_file.h	/^inline void LogFile<MUTEX>::flush()$/;"	f	class:fermat::LogFile
flush	src/fermat/common/logging.cc	/^    virtual void flush()$/;"	f	class:fermat::DefaultOutPut
flush	src/fermat/common/sequence_write_file.cc	/^void SequenceWriteFile::flush()$/;"	f	class:fermat::SequenceWriteFile
flush_all	src/fermat/common/log_async.cc	/^void LogAsync::flush_all(LogFile<NullMutex> *output)$/;"	f	class:fermat::LogAsync
fmt_snprintf	src/fermat/common/format_in.h	/^inline int fmt_snprintf(char *buffer, size_t size, const char *format, ...)$/;"	f	namespace:fermat::__anon29
footer	src/fermat/common/cmdline.h	/^    void footer(const std::string &f)$/;"	f	class:fermat::CmdParser
format	src/fermat/common/format.h	/^        FormatFunc format;$/;"	m	struct:fermat::internal::Value::CustomValue
format	src/fermat/common/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	src/fermat/common/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	src/fermat/common/format.h	/^void format(BasicFormatter<Char> &f, const Char *&format_str, const T &value)$/;"	f
format	src/fermat/common/format_in.h	/^void fermat::internal::PrintfFormatter<Char>::format($/;"	f	class:fermat::internal::PrintfFormatter
format	src/fermat/common/numeric_formatter.cc	/^std::string NumberFormatter::format(bool value, BoolFormat format)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(const void* ptr)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(double value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(double value, int precision)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(double value, int width, int precision)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(float value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(float value, int precision)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(float value, int width, int precision)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(int value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(int value, int width)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(int64_t value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(int64_t value, int width)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(uint64_t value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(uint64_t value, int width)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(unsigned value)$/;"	f	class:fermat::NumberFormatter
format	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format(unsigned value, int width)$/;"	f	class:fermat::NumberFormatter
format0	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format0(int value, int width)$/;"	f	class:fermat::NumberFormatter
format0	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format0(int64_t value, int width)$/;"	f	class:fermat::NumberFormatter
format0	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format0(uint64_t value, int width)$/;"	f	class:fermat::NumberFormatter
format0	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format0(unsigned int value, int width)$/;"	f	class:fermat::NumberFormatter
format_custom_arg	src/fermat/common/format.h	/^    static void format_custom_arg($/;"	f	class:fermat::internal::MakeValue
format_decimal	src/fermat/common/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	src/fermat/common/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fermat::internal
format_decimal	src/fermat/common/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_float	src/fermat/common/format_in.h	/^int fermat::internal::CharTraits<char>::format_float($/;"	f	class:fermat::internal::CharTraits
format_float	src/fermat/common/format_in.h	/^int fermat::internal::CharTraits<wchar_t>::format_float($/;"	f	class:fermat::internal::CharTraits
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(int value, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(int value, int width, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(int64_t value, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(int64_t value, int width, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(uint64_t value, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(uint64_t value, int width, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(unsigned value, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_hex	src/fermat/common/numeric_formatter.h	/^inline std::string NumberFormatter::format_hex(unsigned value, int width, bool prefix)$/;"	f	class:fermat::NumberFormatter
format_time	src/fermat/common/logging.cc	/^void Logging::Impl::format_time()$/;"	f	class:fermat::Logging::Impl
fprintf	src/fermat/common/format_in.h	/^int fermat::fprintf(std::FILE *f, CStringRef format, ArgList args)$/;"	f	class:fermat
fprintf	src/fermat/common/format_in.h	/^int fermat::fprintf(std::ostream &os, CStringRef format, ArgList args)$/;"	f	class:fermat
ftr	src/fermat/common/cmdline.h	/^    std::string ftr;$/;"	m	class:fermat::CmdParser
full_description	src/fermat/common/cmdline.h	/^        std::string full_description(const std::string &pdesc)$/;"	f	class:fermat::CmdParser::option_with_value
g_log_level	src/fermat/common/logging.cc	/^Logging::LogLevel g_log_level = init_log_level();$/;"	m	namespace:fermat	file:
get	src/fermat/common/cmdline.h	/^        const T &get() const $/;"	f	class:fermat::CmdParser::option_with_value
get	src/fermat/common/cmdline.h	/^    const T &get(const std::string &name) const $/;"	f	class:fermat::CmdParser
get	src/fermat/common/env.cc	/^std::string Environment::get(const std::string& name)$/;"	f	class:fermat::Environment
get	src/fermat/common/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	src/fermat/common/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
get	src/fermat/common/shared_state.h	/^	value_type get() $/;"	f	class:fermat::SharedState
get_affinity	src/fermat/common/thread.cc	/^int Thread::get_affinity() const$/;"	f	class:fermat::Thread
get_allocator	src/fermat/common/stack_buffer.h	/^    Allocator get_allocator() const$/;"	f	class:fermat::StackBuffer
get_arg	src/fermat/common/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fermat::internal::FormatterBase
get_arg	src/fermat/common/format_in.h	/^Arg fermat::internal::PrintfFormatter<Char>::get_arg($/;"	f	class:fermat::internal::PrintfFormatter
get_inf_str	src/fermat/common/numeric_string.h	/^inline std::string get_inf_str()$/;"	f	namespace:fermat
get_instance	src/fermat/common/singleton.h	/^    inline static instance_pointer get_instance() {$/;"	f	class:fermat::Singleton
get_log_file_name	src/fermat/common/log_file.h	/^inline std::string LogFile<MUTEX>::get_log_file_name(const Timestamp &stamp)$/;"	f	class:fermat::LogFile
get_max_os_priority	src/fermat/common/thread.cc	/^int Thread::get_max_os_priority(int policy)$/;"	f	class:fermat::Thread
get_min_os_priority	src/fermat/common/thread.cc	/^int Thread::get_min_os_priority(int policy)$/;"	f	class:fermat::Thread
get_name	src/fermat/common/thread.cc	/^std::string Thread::get_name() const$/;"	f	class:fermat::Thread
get_nan_str	src/fermat/common/numeric_string.h	/^inline std::string get_nan_str()$/;"	f	namespace:fermat
get_os_priority	src/fermat/common/thread.cc	/^int Thread::get_os_priority() const$/;"	f	class:fermat::Thread
get_priority	src/fermat/common/thread.cc	/^Thread::Priority Thread::get_priority() const$/;"	f	class:fermat::Thread
grow	src/fermat/common/format_in.h	/^void fermat::internal::FixedBuffer<Char>::grow(std::size_t)$/;"	f	class:fermat::internal::FixedBuffer
grow	src/fermat/common/stack_buffer.h	/^void StackBuffer<T, SIZE, Allocator>::grow(std::size_t len)$/;"	f	class:fermat::StackBuffer
grow_buffer	src/fermat/common/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
has	src/fermat/common/env.cc	/^bool Environment::has(const std::string& name)$/;"	f	class:fermat::Environment
has_properties	src/fermat/common/ascii.h	/^inline bool Ascii::has_properties(int character, int prop)$/;"	f	class:fermat::AsciiType::Ascii
has_set	src/fermat/common/cmdline.h	/^        bool has_set() const $/;"	f	class:fermat::CmdParser::option_without_value
has_set	src/fermat/common/cmdline.h	/^        bool has_set() const$/;"	f	class:fermat::CmdParser::option_with_value
has_some_properties	src/fermat/common/ascii.h	/^inline bool Ascii::has_some_properties(int character, int prop)$/;"	f	class:fermat::AsciiType::Ascii
has_value	src/fermat/common/cmdline.h	/^        bool has_value() const { return false; }$/;"	f	class:fermat::CmdParser::option_without_value
has_value	src/fermat/common/cmdline.h	/^        bool has_value() const { return true; }$/;"	f	class:fermat::CmdParser::option_with_value
high_bits_	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  uint64_t high_bits_;$/;"	m	class:double_conversion::UInt128	file:
hours	src/fermat/common/timespan.h	/^inline int Timespan::hours() const$/;"	f	class:fermat::Timespan
icompare	src/fermat/common/string.h	/^int icompare($/;"	f	namespace:fermat
icompare	src/fermat/common/string.h	/^int icompare(const S& str1, const S& str2)$/;"	f	namespace:fermat
icompare	src/fermat/common/string.h	/^int icompare(const S& str1, typename S::size_type n, const S& str2)$/;"	f	namespace:fermat
icompare	src/fermat/common/string.h	/^int icompare(const S& str1, typename S::size_type n1, const S& str2, typename S::size_type n2)$/;"	f	namespace:fermat
icompare	src/fermat/common/string.h	/^int icompare(const S& str1, typename S::size_type pos, typename S::size_type n, const S& str2)$/;"	f	namespace:fermat
id	src/fermat/common/thread.cc	/^int Thread::id() const$/;"	f	class:fermat::Thread
infinity_symbol_	src/fermat/common/double-conversion/double-conversion.h	/^  const char* const infinity_symbol_;$/;"	m	class:double_conversion::DoubleToStringConverter
infinity_symbol_	src/fermat/common/double-conversion/double-conversion.h	/^  const char* const infinity_symbol_;$/;"	m	class:double_conversion::StringToDoubleConverter
init	src/fermat/common/format_in.h	/^void fermat::SystemError::init($/;"	f	class:fermat::SystemError
init	src/fermat/common/format_in.h	/^void fermat::WindowsError::init($/;"	f	class:fermat::WindowsError
init	src/fermat/common/format_in.h	/^void fermat::internal::ArgMap<Char>::init(const ArgList &args)$/;"	f	class:fermat::internal::ArgMap
init_log_level	src/fermat/common/logging.cc	/^Logging::LogLevel init_log_level()$/;"	f	namespace:fermat
insert_thousand_sep	src/fermat/common/numeric_string.cc	/^void insert_thousand_sep(std::string& str, char thSep, char decSep = '.')$/;"	f	namespace:fermat::detail
instance	src/fermat/common/singleton.h	/^    instance_pointer instance()$/;"	f	class:fermat::Singleton
instance_pointer	src/fermat/common/singleton.h	/^    typedef  instance_type* instance_pointer;$/;"	t	class:fermat::Singleton
instance_type	src/fermat/common/singleton.h	/^    typedef Instance instance_type;$/;"	t	class:fermat::Singleton
int16_t	src/fermat/common/double-conversion/utils.h	/^typedef short int16_t;  \/\/ NOLINT$/;"	t
int32_t	src/fermat/common/double-conversion/utils.h	/^typedef int int32_t;$/;"	t
int64_t	src/fermat/common/double-conversion/utils.h	/^typedef __int64 int64_t;$/;"	t
int8_t	src/fermat/common/double-conversion/utils.h	/^typedef signed char int8_t;$/;"	t
int_to_str	src/fermat/common/numeric_string.h	/^bool int_to_str (T number, unsigned short base, std::string& result, bool prefix = false, int width = -1, char fill = ' ', char thSep = 0)$/;"	f	namespace:fermat
int_to_str	src/fermat/common/numeric_string.h	/^bool int_to_str(T value,$/;"	f	namespace:fermat
int_type	src/fermat/common/format.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fermat::FormatBuf
int_value	src/fermat/common/format.h	/^        int                         int_value;$/;"	m	union:fermat::internal::Value::__anon16
internal	src/fermat/common/format.h	/^namespace internal {$/;"	n	namespace:fermat
internal	src/fermat/common/format.h	/^namespace internal$/;"	n	namespace:fermat
internal	src/fermat/common/format_in.h	/^namespace internal {$/;"	n	namespace:fermat
isDigit	src/fermat/common/double-conversion/double-conversion.cc	/^static bool isDigit(int x, int radix) {$/;"	f	namespace:double_conversion
isWhitespace	src/fermat/common/double-conversion/double-conversion.cc	/^static bool isWhitespace(int x) {$/;"	f	namespace:double_conversion
is_alpha	src/fermat/common/ascii.h	/^inline bool Ascii::is_alpha(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_alpha_numeric	src/fermat/common/ascii.h	/^inline bool Ascii::is_alpha_numeric(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_ascii	src/fermat/common/ascii.h	/^inline bool Ascii::is_ascii(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_digit	src/fermat/common/ascii.h	/^inline bool Ascii::is_digit(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_elapsed	src/fermat/common/clock.h	/^inline bool Clock::is_elapsed(Clock::ClockDiff interval) const$/;"	f	class:fermat::Clock
is_elapsed	src/fermat/common/timestamp.h	/^inline bool Timestamp::is_elapsed(Timestamp::TimeDiff interval) const$/;"	f	class:fermat::Timestamp
is_empty	src/fermat/common/double-conversion/utils.h	/^  bool is_empty() const { return length_ == 0; }$/;"	f	class:double_conversion::Vector
is_finalized	src/fermat/common/double-conversion/utils.h	/^  bool is_finalized() const { return position_ < 0; }$/;"	f	class:double_conversion::StringBuilder
is_hex_digit	src/fermat/common/ascii.h	/^inline bool Ascii::is_hex_digit(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_lowwer	src/fermat/common/ascii.h	/^inline bool Ascii::is_lowwer(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_main_thread	src/fermat/common/this_thread.cc	/^bool is_main_thread()$/;"	f	namespace:fermat::this_thread
is_negative	src/fermat/common/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fermat::internal::SignChecker
is_negative	src/fermat/common/format.h	/^    static bool is_negative(T)$/;"	f	struct:fermat::internal::SignChecker
is_negative	src/fermat/common/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fermat::internal
is_punct	src/fermat/common/ascii.h	/^inline bool Ascii::is_punct(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_running	src/fermat/common/thread.cc	/^bool Thread::is_running() const$/;"	f	class:fermat::Thread
is_same	src/fermat/common/format_in.h	/^struct is_same$/;"	s	namespace:fermat::__anon29
is_same	src/fermat/common/format_in.h	/^struct is_same<T, T>$/;"	s	namespace:fermat::__anon29
is_space	src/fermat/common/ascii.h	/^inline bool Ascii::is_space(int character)$/;"	f	class:fermat::AsciiType::Ascii
is_stack	src/fermat/common/stack_buffer.h	/^    bool is_stack() const $/;"	f	class:fermat::StackBuffer
is_upper	src/fermat/common/ascii.h	/^inline bool Ascii::is_upper(int character)$/;"	f	class:fermat::AsciiType::Ascii
isinf	src/fermat/common/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fermat::internal
isinfinity	src/fermat/common/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isnan	src/fermat/common/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fermat::internal
isnegative	src/fermat/common/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnotanumber	src/fermat/common/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
join	src/fermat/common/thread.cc	/^void Thread::join()$/;"	f	class:fermat::Thread
joined	src/fermat/common/thread.cc	/^		bool                      joined;$/;"	m	class:fermat::Thread::ThreadData	file:
junk_string_value_	src/fermat/common/double-conversion/double-conversion.h	/^  const double junk_string_value_;$/;"	m	class:double_conversion::StringToDoubleConverter
kBase10MaximalLength	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kBase10MaximalLength = 17;$/;"	m	class:double_conversion::DoubleToStringConverter
kBigitCapacity	src/fermat/common/double-conversion/bignum.h	/^  static const int kBigitCapacity = kMaxSignificantBits \/ kBigitSize;$/;"	m	class:double_conversion::Bignum
kBigitMask	src/fermat/common/double-conversion/bignum.h	/^  static const Chunk kBigitMask = (1 << kBigitSize) - 1;$/;"	m	class:double_conversion::Bignum
kBigitSize	src/fermat/common/double-conversion/bignum.h	/^  static const int kBigitSize = 28;$/;"	m	class:double_conversion::Bignum
kBufferSize	src/fermat/common/log_stream.h	/^    static const int kBufferSize = 2048;$/;"	m	class:fermat::LogStream
kCachedPowers	src/fermat/common/double-conversion/cached-powers.cc	/^static const CachedPower kCachedPowers[] = {$/;"	m	namespace:double_conversion	file:
kCachedPowersOffset	src/fermat/common/double-conversion/cached-powers.cc	/^static const int kCachedPowersOffset = 348;  \/\/ -1 * the first decimal_exponent.$/;"	m	namespace:double_conversion	file:
kCharSize	src/fermat/common/double-conversion/utils.h	/^static const int kCharSize = sizeof(char);$/;"	m	namespace:double_conversion
kCharacterProperties	src/fermat/common/ascii.cc	/^const int Ascii::kCharacterProperties[128] = $/;"	m	class:fermat::Ascii	file:
kCharacterProperties	src/fermat/common/ascii.h	/^    static const int kCharacterProperties[128];$/;"	m	class:fermat::AsciiType::Ascii
kChunkSize	src/fermat/common/double-conversion/bignum.h	/^  static const int kChunkSize = sizeof(Chunk) * 8;$/;"	m	class:double_conversion::Bignum
kD_1_LOG2_10	src/fermat/common/double-conversion/cached-powers.cc	/^static const double kD_1_LOG2_10 = 0.30102999566398114;  \/\/  1 \/ lg(10)$/;"	m	namespace:double_conversion	file:
kDays	src/fermat/common/timespan.h	/^    static const TimeDiff kDays    = 1000L * 1000L * 60L * 60L * 24L;$/;"	m	class:fermat::Timespan
kDecimalExponentDistance	src/fermat/common/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kDecimalExponentDistance = 8;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kDecimalExponentDistance	src/fermat/common/double-conversion/cached-powers.h	/^  static const int kDecimalExponentDistance;$/;"	m	class:double_conversion::PowersOfTenCache
kDenormalExponent	src/fermat/common/double-conversion/ieee.h	/^  static const int kDenormalExponent = -kExponentBias + 1;$/;"	m	class:double_conversion::Double
kDenormalExponent	src/fermat/common/double-conversion/ieee.h	/^  static const int kDenormalExponent = -kExponentBias + 1;$/;"	m	class:double_conversion::Single
kDoubleChunkSize	src/fermat/common/double-conversion/bignum.h	/^  static const int kDoubleChunkSize = sizeof(DoubleChunk) * 8;$/;"	m	class:double_conversion::Bignum
kDoubleSignificandSize	src/fermat/common/double-conversion/fixed-dtoa.cc	/^static const int kDoubleSignificandSize = 53;  \/\/ Includes the hidden bit.$/;"	m	namespace:double_conversion	file:
kExactPowersOfTenSize	src/fermat/common/double-conversion/strtod.cc	/^static const int kExactPowersOfTenSize = ARRAY_SIZE(exact_powers_of_ten);$/;"	m	namespace:double_conversion	file:
kExponentBias	src/fermat/common/double-conversion/ieee.h	/^  static const int kExponentBias = 0x3FF + kPhysicalSignificandSize;$/;"	m	class:double_conversion::Double
kExponentBias	src/fermat/common/double-conversion/ieee.h	/^  static const int kExponentBias = 0x7F + kPhysicalSignificandSize;$/;"	m	class:double_conversion::Single
kExponentMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kExponentMask = 0x7F800000;$/;"	m	class:double_conversion::Single
kExponentMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kExponentMask = UINT64_2PART_C(0x7FF00000, 00000000);$/;"	m	class:double_conversion::Double
kFastDtoaMaximalLength	src/fermat/common/double-conversion/fast-dtoa.h	/^static const int kFastDtoaMaximalLength = 17;$/;"	m	namespace:double_conversion
kFastDtoaMaximalSingleLength	src/fermat/common/double-conversion/fast-dtoa.h	/^static const int kFastDtoaMaximalSingleLength = 9;$/;"	m	namespace:double_conversion
kFltExp	src/fermat/common/numeric_string.h	/^static const char  kFltExp = 'e';$/;"	m	namespace:fermat
kFltInf	src/fermat/common/numeric_string.h	/^static const char *kFltInf = "inf";$/;"	m	namespace:fermat
kFltNan	src/fermat/common/numeric_string.h	/^static const char *kFltNan = "nan";$/;"	m	namespace:fermat
kHiddenBit	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kHiddenBit = 0x00800000;$/;"	m	class:double_conversion::Single
kHiddenBit	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kHiddenBit = UINT64_2PART_C(0x00100000, 00000000);$/;"	m	class:double_conversion::Double
kHours	src/fermat/common/timespan.h	/^    static const TimeDiff kHours   = 1000L * 1000L * 60L * 60L;$/;"	m	class:fermat::Timespan
kInfinity	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kInfinity = 0x7F800000;$/;"	m	class:double_conversion::Single
kInfinity	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kInfinity = UINT64_2PART_C(0x7FF00000, 00000000);$/;"	m	class:double_conversion::Double
kMask32	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  static const uint64_t kMask32 = 0xFFFFFFFF;$/;"	m	class:double_conversion::UInt128	file:
kMaxClockVal	src/fermat/common/clock.cc	/^const Clock::ClockVal Clock::kMaxClockVal = std::numeric_limits<Clock::ClockVal>::max();$/;"	m	class:fermat::Clock	file:
kMaxClockVal	src/fermat/common/clock.h	/^    static const ClockVal kMaxClockVal;$/;"	m	class:fermat::Clock
kMaxDecimalExponent	src/fermat/common/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kMaxDecimalExponent = 340;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kMaxDecimalExponent	src/fermat/common/double-conversion/cached-powers.h	/^  static const int kMaxDecimalExponent;$/;"	m	class:double_conversion::PowersOfTenCache
kMaxDecimalPower	src/fermat/common/double-conversion/strtod.cc	/^static const int kMaxDecimalPower = 309;$/;"	m	namespace:double_conversion	file:
kMaxExactDoubleIntegerDecimalDigits	src/fermat/common/double-conversion/strtod.cc	/^static const int kMaxExactDoubleIntegerDecimalDigits = 15;$/;"	m	namespace:double_conversion	file:
kMaxExponent	src/fermat/common/double-conversion/ieee.h	/^  static const int kMaxExponent = 0x7FF - kExponentBias;$/;"	m	class:double_conversion::Double
kMaxExponent	src/fermat/common/double-conversion/ieee.h	/^  static const int kMaxExponent = 0xFF - kExponentBias;$/;"	m	class:double_conversion::Single
kMaxExponentialDigits	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kMaxExponentialDigits = 120;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxFLTStringLen	src/fermat/common/numeric_string.h	/^static const int   kMaxFLTStringLen = 780;$/;"	m	namespace:fermat
kMaxFixedDigitsAfterPoint	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kMaxFixedDigitsAfterPoint = 60;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxFixedDigitsBeforePoint	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kMaxFixedDigitsBeforePoint = 60;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxIntStringLen	src/fermat/common/numeric_string.h	/^static const int   kMaxIntStringLen = 65;$/;"	m	namespace:fermat
kMaxPrecisionDigits	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kMaxPrecisionDigits = 120;$/;"	m	class:double_conversion::DoubleToStringConverter
kMaxSignificantBits	src/fermat/common/double-conversion/bignum.h	/^  static const int kMaxSignificantBits = 3584;$/;"	m	class:double_conversion::Bignum
kMaxSignificantDecimalDigits	src/fermat/common/double-conversion/strtod.cc	/^static const int kMaxSignificantDecimalDigits = 780;$/;"	m	namespace:double_conversion	file:
kMaxSignificantDigits	src/fermat/common/double-conversion/double-conversion.cc	/^const int kMaxSignificantDigits = 772;$/;"	m	namespace:double_conversion	file:
kMaxTimeVal	src/fermat/common/timestamp.cc	/^const Timestamp::TimeVal Timestamp::kMaxTimeVal = std::numeric_limits<int64_t>::max();$/;"	m	class:fermat::Timestamp	file:
kMaxTimeVal	src/fermat/common/timestamp.h	/^    static const TimeVal  kMaxTimeVal;$/;"	m	class:fermat::Timestamp
kMaxUint64	src/fermat/common/double-conversion/strtod.cc	/^static const uint64_t kMaxUint64 = UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF);$/;"	m	namespace:double_conversion	file:
kMaxUint64DecimalDigits	src/fermat/common/double-conversion/strtod.cc	/^static const int kMaxUint64DecimalDigits = 19;$/;"	m	namespace:double_conversion	file:
kMaximalTargetExponent	src/fermat/common/double-conversion/fast-dtoa.cc	/^static const int kMaximalTargetExponent = -32;$/;"	m	namespace:double_conversion	file:
kMicroSecPerSec	src/fermat/common/timestamp.h	/^    static const TimeDiff kMicroSecPerSec = 1000000;$/;"	m	class:fermat::Timestamp
kMillSeconds	src/fermat/common/timespan.h	/^    static const TimeDiff kMillSeconds = 1000L;$/;"	m	class:fermat::Timespan
kMinClockVal	src/fermat/common/clock.cc	/^const Clock::ClockVal Clock::kMinClockVal = std::numeric_limits<Clock::ClockVal>::min();$/;"	m	class:fermat::Clock	file:
kMinClockVal	src/fermat/common/clock.h	/^    static const ClockVal kMinClockVal;$/;"	m	class:fermat::Clock
kMinDecimalExponent	src/fermat/common/double-conversion/cached-powers.cc	/^const int PowersOfTenCache::kMinDecimalExponent = -348;$/;"	m	class:double_conversion::PowersOfTenCache	file:
kMinDecimalExponent	src/fermat/common/double-conversion/cached-powers.h	/^  static const int kMinDecimalExponent;$/;"	m	class:double_conversion::PowersOfTenCache
kMinDecimalPower	src/fermat/common/double-conversion/strtod.cc	/^static const int kMinDecimalPower = -324;$/;"	m	namespace:double_conversion	file:
kMinPrecisionDigits	src/fermat/common/double-conversion/double-conversion.h	/^  static const int kMinPrecisionDigits = 1;$/;"	m	class:double_conversion::DoubleToStringConverter
kMinTimeVal	src/fermat/common/timestamp.cc	/^const Timestamp::TimeVal Timestamp::kMinTimeVal = std::numeric_limits<int64_t>::min();$/;"	m	class:fermat::Timestamp	file:
kMinTimeVal	src/fermat/common/timestamp.h	/^    static const TimeVal  kMinTimeVal;$/;"	m	class:fermat::Timestamp
kMinimalTargetExponent	src/fermat/common/double-conversion/fast-dtoa.cc	/^static const int kMinimalTargetExponent = -60;$/;"	m	namespace:double_conversion	file:
kMinutes	src/fermat/common/timespan.h	/^    static const TimeDiff kMinutes = 1000L * 1000L * 60L;$/;"	m	class:fermat::Timespan
kNaN	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kNaN = 0x7FC00000;$/;"	m	class:double_conversion::Single
kNaN	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kNaN = UINT64_2PART_C(0x7FF80000, 00000000);$/;"	m	class:double_conversion::Double
kNumBaseDes	src/fermat/common/numeric_parser.h	/^	static const unsigned short kNumBaseDes = 10;$/;"	m	class:fermat::NumberParser
kNumBaseHex	src/fermat/common/numeric_parser.h	/^	static const unsigned short kNumBaseHex = 0x10;$/;"	m	class:fermat::NumberParser
kNumBaseOct	src/fermat/common/numeric_parser.h	/^	static const unsigned short kNumBaseOct = 010;$/;"	m	class:fermat::NumberParser
kPhysicalSignificandSize	src/fermat/common/double-conversion/ieee.h	/^  static const int kPhysicalSignificandSize = 23;  \/\/ Excludes the hidden bit.$/;"	m	class:double_conversion::Single
kPhysicalSignificandSize	src/fermat/common/double-conversion/ieee.h	/^  static const int kPhysicalSignificandSize = 52;  \/\/ Excludes the hidden bit.$/;"	m	class:double_conversion::Double
kSeconds	src/fermat/common/timespan.h	/^    static const TimeDiff kSeconds = 1000L * 1000L;$/;"	m	class:fermat::Timespan
kSignMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kSignMask = 0x80000000;$/;"	m	class:double_conversion::Single
kSignMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kSignMask = UINT64_2PART_C(0x80000000, 00000000);$/;"	m	class:double_conversion::Double
kSignificandMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint32_t kSignificandMask = 0x007FFFFF;$/;"	m	class:double_conversion::Single
kSignificandMask	src/fermat/common/double-conversion/ieee.h	/^  static const uint64_t kSignificandMask = UINT64_2PART_C(0x000FFFFF, FFFFFFFF);$/;"	m	class:double_conversion::Double
kSignificandSize	src/fermat/common/double-conversion/diy-fp.h	/^  static const int kSignificandSize = 64;$/;"	m	class:double_conversion::DiyFp
kSignificandSize	src/fermat/common/double-conversion/ieee.h	/^  static const int kSignificandSize = 24;$/;"	m	class:double_conversion::Single
kSignificandSize	src/fermat/common/double-conversion/ieee.h	/^  static const int kSignificandSize = 53;$/;"	m	class:double_conversion::Double
kSmallPowersOfTen	src/fermat/common/double-conversion/fast-dtoa.cc	/^static unsigned int const kSmallPowersOfTen[] =$/;"	m	namespace:double_conversion	file:
kTempBuffSize	src/fermat/common/sequence_write_file.h	/^    static const size_t kTempBuffSize = 64 * 1024;$/;"	m	class:fermat::SequenceWriteFile
kUint64MSB	src/fermat/common/double-conversion/diy-fp.h	/^  static const uint64_t kUint64MSB = UINT64_2PART_C(0x80000000, 00000000);$/;"	m	class:double_conversion::DiyFp
kWhitespaceTable16	src/fermat/common/double-conversion/double-conversion.cc	/^static const uc16 kWhitespaceTable16[] = {$/;"	m	namespace:double_conversion	file:
kWhitespaceTable16Length	src/fermat/common/double-conversion/double-conversion.cc	/^static const int kWhitespaceTable16Length = ARRAY_SIZE(kWhitespaceTable16);$/;"	m	namespace:double_conversion	file:
kWhitespaceTable7	src/fermat/common/double-conversion/double-conversion.cc	/^static const char kWhitespaceTable7[] = { 32, 13, 10, 9, 11, 12 };$/;"	m	namespace:double_conversion	file:
kWhitespaceTable7Length	src/fermat/common/double-conversion/double-conversion.cc	/^static const int kWhitespaceTable7Length = ARRAY_SIZE(kWhitespaceTable7);$/;"	m	namespace:double_conversion	file:
last	src/fermat/common/double-conversion/utils.h	/^  T& last() { return start_[length_ - 1]; }$/;"	f	class:double_conversion::Vector
length	src/fermat/common/double-conversion/utils.h	/^  int length() const { return length_; }$/;"	f	class:double_conversion::Vector
length_	src/fermat/common/double-conversion/utils.h	/^  int length_;$/;"	m	class:double_conversion::Vector
lexical_cast	src/fermat/common/cmdline.h	/^Target lexical_cast(const Source &arg)$/;"	f	namespace:fermat::detail
lexical_cast_t	src/fermat/common/cmdline.h	/^class lexical_cast_t<Target, Source, true>{$/;"	c	namespace:fermat::detail
lexical_cast_t	src/fermat/common/cmdline.h	/^class lexical_cast_t<Target, std::string, false>{$/;"	c	namespace:fermat::detail
lexical_cast_t	src/fermat/common/cmdline.h	/^class lexical_cast_t<std::string, Source, false>{$/;"	c	namespace:fermat::detail
lexical_cast_t	src/fermat/common/cmdline.h	/^class lexical_cast_t{$/;"	c	namespace:fermat::detail
lock	src/fermat/common/mutex.cc	/^void Mutex::lock() $/;"	f	class:fermat::Mutex
lock	src/fermat/common/mutex.cc	/^void TimedMutex::lock()$/;"	f	class:fermat::TimedMutex
lock	src/fermat/common/mutex.h	/^    void lock() { }$/;"	f	class:fermat::NullMutex
lock	src/fermat/common/mutex.h	/^    void lock()$/;"	f	class:fermat::UniqueLock
lock_try	src/fermat/common/mutex.cc	/^bool Mutex::lock_try() $/;"	f	class:fermat::Mutex
lock_try	src/fermat/common/mutex.cc	/^bool TimedMutex::lock_try()$/;"	f	class:fermat::TimedMutex
lock_try	src/fermat/common/mutex.h	/^    bool lock_try()$/;"	f	class:fermat::UniqueLock
lock_try	src/fermat/common/mutex.h	/^    void lock_try() { }$/;"	f	class:fermat::NullMutex
lock_try_for	src/fermat/common/mutex.cc	/^bool Mutex::lock_try_for(Timespan span)$/;"	f	class:fermat::Mutex
lock_try_for	src/fermat/common/mutex.cc	/^bool TimedMutex::lock_try_for(Timespan span)$/;"	f	class:fermat::TimedMutex
lock_try_for	src/fermat/common/mutex.h	/^    bool lock_try_for(Timespan tp)$/;"	f	class:fermat::UniqueLock
lock_try_for	src/fermat/common/mutex.h	/^    bool lock_try_for(Timespan ts) {(void)ts; return true; }$/;"	f	class:fermat::NullMutex
lock_try_for	src/fermat/common/mutex.h	/^    bool lock_try_for(Timestamp ts)$/;"	f	class:fermat::UniqueLock
lock_try_until	src/fermat/common/mutex.cc	/^bool TimedMutex::lock_try_until(Timestamp tp)$/;"	f	class:fermat::TimedMutex
log_len	tests/common/log_test.cc	/^static int log_len = 128;$/;"	v	file:
log_level	src/fermat/common/logging.h	/^inline Logging::LogLevel Logging::log_level()$/;"	f	class:fermat::Logging
long_count	tests/common/log_test.cc	/^static int long_count = 0;$/;"	v	file:
long_double_value	src/fermat/common/format.h	/^        long double                 long_double_value;$/;"	m	union:fermat::internal::Value::__anon16
long_long_value	src/fermat/common/format.h	/^        LongLong                    long_long_value;$/;"	m	union:fermat::internal::Value::__anon16
low_bits_	src/fermat/common/double-conversion/fixed-dtoa.cc	/^  uint64_t low_bits_;$/;"	m	class:double_conversion::UInt128	file:
main	tests/common/cmdline_test.cc	/^int main(int argc, char**argv) $/;"	f
main	tests/common/log_test.cc	/^int main(int argc, char** argv)$/;"	f
make	src/fermat/common/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fermat::ArgArray
make	src/fermat/common/format.h	/^    static Value make(const T &value)$/;"	f	namespace:fermat::internal
make_name	src/fermat/common/thread.cc	/^std::string Thread::make_name()$/;"	f	class:fermat::Thread
make_type	src/fermat/common/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fermat::internal
make_type	src/fermat/common/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fermat
make_type	src/fermat/common/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fermat::internal
map_priority	src/fermat/common/thread.cc	/^int Thread::map_priority(int prio, int plicy)$/;"	f	class:fermat::Thread
map_priority_reverse	src/fermat/common/thread.cc	/^int Thread::map_priority_reverse(int prio, int plicy)$/;"	f	class:fermat::Thread
max	src/fermat/common/clock.cc	4;"	d	file:
max_leading_padding_zeroes_in_precision_mode_	src/fermat/common/double-conversion/double-conversion.h	/^  const int max_leading_padding_zeroes_in_precision_mode_;$/;"	m	class:double_conversion::DoubleToStringConverter
max_trailing_padding_zeroes_in_precision_mode_	src/fermat/common/double-conversion/double-conversion.h	/^  const int max_trailing_padding_zeroes_in_precision_mode_;$/;"	m	class:double_conversion::DoubleToStringConverter
micro_mill_seconds	src/fermat/common/timespan.h	/^inline int Timespan::micro_mill_seconds() const$/;"	f	class:fermat::Timespan
micro_seconds	src/fermat/common/clock.h	/^inline Clock::ClockVal Clock::micro_seconds() const$/;"	f	class:fermat::Clock
micro_seconds	src/fermat/common/timespan.h	/^inline  int Timespan::micro_seconds() const$/;"	f	class:fermat::Timespan
micro_seconds	src/fermat/common/timestamp.h	/^inline Timestamp::TimeVal Timestamp::micro_seconds() const$/;"	f	class:fermat::Timestamp
mill_seconds	src/fermat/common/timespan.h	/^inline int Timespan::mill_seconds() const$/;"	f	class:fermat::Timespan
mill_seconds	src/fermat/common/timestamp.h	/^inline Timestamp::TimeVal Timestamp::mill_seconds() const$/;"	f	class:fermat::Timestamp
min	src/fermat/common/clock.cc	3;"	d	file:
minutes	src/fermat/common/timespan.h	/^inline int Timespan::minutes() const $/;"	f	class:fermat::Timespan
monotonic	src/fermat/common/clock.cc	/^bool Clock::monotonic()$/;"	f	class:fermat::Clock
move	src/fermat/common/stack_buffer.h	/^    void move(StackBuffer &other)$/;"	f	class:fermat::StackBuffer
must	src/fermat/common/cmdline.h	/^        bool must() const$/;"	f	class:fermat::CmdParser::option_with_value
must	src/fermat/common/cmdline.h	/^        bool must() const$/;"	f	class:fermat::CmdParser::option_without_value
name	src/fermat/common/cmdline.h	/^        const std::string &name() const$/;"	f	class:fermat::CmdParser::option_with_value
name	src/fermat/common/cmdline.h	/^        const std::string &name() const$/;"	f	class:fermat::CmdParser::option_without_value
name	src/fermat/common/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fermat::internal::NamedArg
nan_symbol_	src/fermat/common/double-conversion/double-conversion.h	/^  const char* const nan_symbol_;$/;"	m	class:double_conversion::DoubleToStringConverter
nan_symbol_	src/fermat/common/double-conversion/double-conversion.h	/^  const char* const nan_symbol_;$/;"	m	class:double_conversion::StringToDoubleConverter
next_arg	src/fermat/common/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fermat::internal::FormatterBase
node_name	src/fermat/common/env.cc	/^std::string Environment::node_name()$/;"	f	class:fermat::Environment
numeric_limits	src/fermat/common/format.h	/^class numeric_limits<fermat::internal::DummyInt>:$/;"	c	namespace:std
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5, T a6)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5, T a6, T a7)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9)$/;"	f	namespace:fermat
oneof	src/fermat/common/cmdline.h	/^oneof_reader<T> oneof(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9, T a10)$/;"	f	namespace:fermat
oneof_reader	src/fermat/common/cmdline.h	/^struct oneof_reader{$/;"	s	namespace:fermat
operator !=	src/fermat/common/clock.h	/^inline bool Clock::operator != (const Clock& ts) const$/;"	f	class:fermat::Clock
operator !=	src/fermat/common/string_ref.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator !=	src/fermat/common/timespan.h	/^inline bool Timespan::operator != (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator !=	src/fermat/common/timespan.h	/^inline bool Timespan::operator != (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator !=	src/fermat/common/timestamp.h	/^inline bool Timestamp::operator != (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator ()	src/fermat/common/cmdline.h	/^    T operator()(const std::string &s) const $/;"	f	struct:fermat::range_reader
operator ()	src/fermat/common/cmdline.h	/^    T operator()(const std::string &s)$/;"	f	struct:fermat::oneof_reader
operator ()	src/fermat/common/cmdline.h	/^    T operator()(const std::string &str)$/;"	f	struct:fermat::default_reader
operator *	src/fermat/common/timespan.cc	/^Timespan Timespan::operator * (int times) const$/;"	f	class:fermat::Timespan
operator *=	src/fermat/common/timespan.cc	/^ Timespan& Timespan::operator *= (int times)$/;"	f	class:fermat::Timespan
operator +	src/fermat/common/clock.h	/^inline Clock Clock::operator + (Clock::ClockDiff d) const$/;"	f	class:fermat::Clock
operator +	src/fermat/common/timespan.cc	/^Timespan Timespan::operator + (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator +	src/fermat/common/timespan.cc	/^Timespan Timespan::operator + (const Timespan& d) const$/;"	f	class:fermat::Timespan
operator +	src/fermat/common/timestamp.cc	/^Timestamp  Timestamp::operator +  (TimeDiff d) const$/;"	f	class:fermat::Timestamp
operator +	src/fermat/common/timestamp.cc	/^Timestamp  Timestamp::operator +  (const Timespan& span) const$/;"	f	class:fermat::Timestamp
operator ++	src/fermat/common/numeric_string.h	/^		char* operator ++ (int) \/\/ postfix$/;"	f	class:fermat::Impl::Ptr
operator ++	src/fermat/common/numeric_string.h	/^		char*& operator ++ () \/\/ prefix$/;"	f	class:fermat::Impl::Ptr
operator +=	src/fermat/common/clock.h	/^inline Clock& Clock::operator += (Clock::ClockDiff d)$/;"	f	class:fermat::Clock
operator +=	src/fermat/common/numeric_string.h	/^		char*& operator += (int incr)$/;"	f	class:fermat::Impl::Ptr
operator +=	src/fermat/common/timespan.cc	/^Timespan& Timespan::operator += (TimeDiff microSeconds)$/;"	f	class:fermat::Timespan
operator +=	src/fermat/common/timespan.cc	/^Timespan& Timespan::operator += (const Timespan& d)$/;"	f	class:fermat::Timespan
operator +=	src/fermat/common/timestamp.cc	/^Timestamp& Timestamp::operator += (const Timespan& span)$/;"	f	class:fermat::Timestamp
operator +=	src/fermat/common/timestamp.h	/^inline Timestamp& Timestamp::operator += (Timestamp::TimeDiff d)$/;"	f	class:fermat::Timestamp
operator -	src/fermat/common/clock.h	/^inline Clock Clock::operator - (Clock::ClockDiff d) const$/;"	f	class:fermat::Clock
operator -	src/fermat/common/clock.h	/^inline Clock::ClockDiff Clock::operator - (const Clock& ts) const$/;"	f	class:fermat::Clock
operator -	src/fermat/common/timespan.cc	/^Timespan Timespan::operator - (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator -	src/fermat/common/timespan.cc	/^Timespan Timespan::operator - (const Timespan& d) const$/;"	f	class:fermat::Timespan
operator -	src/fermat/common/timestamp.cc	/^Timestamp  Timestamp::operator -  (TimeDiff d) const$/;"	f	class:fermat::Timestamp
operator -	src/fermat/common/timestamp.cc	/^Timestamp  Timestamp::operator -  (const Timespan& span) const$/;"	f	class:fermat::Timestamp
operator -	src/fermat/common/timestamp.h	/^inline Timestamp::TimeDiff Timestamp::operator -  (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator --	src/fermat/common/numeric_string.h	/^		char* operator -- (int) \/\/ postfix$/;"	f	class:fermat::Impl::Ptr
operator --	src/fermat/common/numeric_string.h	/^		char*& operator -- () \/\/ prefix$/;"	f	class:fermat::Impl::Ptr
operator -=	src/fermat/common/clock.h	/^inline Clock& Clock::operator -= (Clock::ClockDiff d)$/;"	f	class:fermat::Clock
operator -=	src/fermat/common/numeric_string.h	/^		char*& operator -= (int decr)$/;"	f	class:fermat::Impl::Ptr
operator -=	src/fermat/common/timespan.cc	/^Timespan& Timespan::operator -= (TimeDiff microSeconds)$/;"	f	class:fermat::Timespan
operator -=	src/fermat/common/timespan.cc	/^Timespan& Timespan::operator -= (const Timespan& d)$/;"	f	class:fermat::Timespan
operator -=	src/fermat/common/timestamp.h	/^inline Timestamp& Timestamp::operator -= (Timestamp::TimeDiff d)$/;"	f	class:fermat::Timestamp
operator /	src/fermat/common/timespan.cc	/^Timespan Timespan::operator \/ (int times) const$/;"	f	class:fermat::Timespan
operator /=	src/fermat/common/timespan.cc	/^Timespan& Timespan::operator \/= (int times)$/;"	f	class:fermat::Timespan
operator <	src/fermat/common/clock.h	/^inline bool Clock::operator <  (const Clock& ts) const$/;"	f	class:fermat::Clock
operator <	src/fermat/common/string_ref.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator <	src/fermat/common/timespan.h	/^inline bool Timespan::operator <  (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator <	src/fermat/common/timespan.h	/^inline bool Timespan::operator <  (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator <	src/fermat/common/timestamp.h	/^inline bool Timestamp::operator <  (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(fermat::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(const void* p)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(double v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(int v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(long long v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(long v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(short v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(unsigned int v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(unsigned long long v) $/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(unsigned long v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.cc	/^LogStream& LogStream::operator<<(unsigned short v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator << (bool v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator<<(char v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator<<(const StringRef& v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator<<(const char* v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator<<(const std::string& v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/log_stream.h	/^    self& operator<<(float v)$/;"	f	class:fermat::LogStream
operator <<	src/fermat/common/logging.cc	/^inline LogStream& operator<<(LogStream& s, T v)$/;"	f	namespace:fermat
operator <<	src/fermat/common/logging.cc	/^inline LogStream& operator<<(LogStream& s, const Logging::SourceFile& v)$/;"	f	namespace:fermat
operator <=	src/fermat/common/clock.h	/^inline bool Clock::operator <= (const Clock& ts) const$/;"	f	class:fermat::Clock
operator <=	src/fermat/common/string_ref.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator <=	src/fermat/common/timespan.h	/^inline bool Timespan::operator <= (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator <=	src/fermat/common/timespan.h	/^inline bool Timespan::operator <= (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator <=	src/fermat/common/timestamp.h	/^inline bool Timestamp::operator <= (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator =	src/fermat/common/clock.cc	/^Clock& Clock::operator = (ClockVal tv)$/;"	f	class:fermat::Clock
operator =	src/fermat/common/clock.cc	/^Clock& Clock::operator = (const Clock& other)$/;"	f	class:fermat::Clock
operator =	src/fermat/common/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	src/fermat/common/stack_buffer.h	/^    StackBuffer &operator=(StackBuffer &&other)$/;"	f	class:fermat::StackBuffer
operator =	src/fermat/common/timespan.h	/^inline Timespan& Timespan::operator = (const TimeDiff microSec)$/;"	f	class:fermat::Timespan
operator =	src/fermat/common/timespan.h	/^inline Timespan& Timespan::operator = (const Timespan &rhs)$/;"	f	class:fermat::Timespan
operator =	src/fermat/common/timestamp.h	/^inline Timestamp& Timestamp::operator =(const TimeVal &rhs)$/;"	f	class:fermat::Timestamp
operator =	src/fermat/common/timestamp.h	/^inline Timestamp& Timestamp::operator =(const Timestamp &rhs)$/;"	f	class:fermat::Timestamp
operator ==	src/fermat/common/clock.h	/^inline bool Clock::operator == (const Clock& ts) const$/;"	f	class:fermat::Clock
operator ==	src/fermat/common/string_ref.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator ==	src/fermat/common/timespan.h	/^inline bool Timespan::operator == (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator ==	src/fermat/common/timespan.h	/^inline bool Timespan::operator == (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator ==	src/fermat/common/timestamp.h	/^ inline bool Timestamp::operator == (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator >	src/fermat/common/clock.h	/^inline bool Clock::operator >  (const Clock& ts) const$/;"	f	class:fermat::Clock
operator >	src/fermat/common/string_ref.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator >	src/fermat/common/timespan.h	/^inline bool Timespan::operator >  (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator >	src/fermat/common/timespan.h	/^inline bool Timespan::operator >  (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator >	src/fermat/common/timestamp.h	/^inline bool Timestamp::operator >  (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator >=	src/fermat/common/clock.h	/^inline bool Clock::operator >= (const Clock& ts) const$/;"	f	class:fermat::Clock
operator >=	src/fermat/common/string_ref.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fermat::BasicStringRef
operator >=	src/fermat/common/timespan.h	/^inline bool Timespan::operator >= (TimeDiff microSeconds) const$/;"	f	class:fermat::Timespan
operator >=	src/fermat/common/timespan.h	/^inline bool Timespan::operator >= (const Timespan& ts) const$/;"	f	class:fermat::Timespan
operator >=	src/fermat/common/timestamp.h	/^inline bool Timestamp::operator >= (const Timestamp& ts) const$/;"	f	class:fermat::Timestamp
operator []	src/fermat/common/basic_buffer.h	/^    T &operator[](std::size_t index)$/;"	f	class:fermat::BasicBuffer
operator []	src/fermat/common/basic_buffer.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fermat::BasicBuffer
operator []	src/fermat/common/double-conversion/utils.h	/^  T& operator[](int index) const {$/;"	f	class:double_conversion::Vector
operator []	src/fermat/common/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fermat::ArgList
operator []	src/fermat/common/string_ref.h	/^    char operator[](size_t n) const $/;"	f	class:fermat::BasicStringRef
operator bool	src/fermat/common/timespan.h	/^inline Timespan::operator bool () const$/;"	f	class:fermat::Timespan
operator char*	src/fermat/common/numeric_string.h	/^		operator char* () const$/;"	f	class:fermat::Impl::Ptr
operator int	src/fermat/common/format.h	/^    operator int() const$/;"	f	struct:fermat::internal::DummyInt
option_base	src/fermat/common/cmdline.h	/^    class option_base{$/;"	c	class:fermat::CmdParser
option_with_value	src/fermat/common/cmdline.h	/^        option_with_value(const std::string &longname,$/;"	f	class:fermat::CmdParser::option_with_value
option_with_value	src/fermat/common/cmdline.h	/^    class option_with_value : public option_base {$/;"	c	class:fermat::CmdParser
option_with_value_with_reader	src/fermat/common/cmdline.h	/^        option_with_value_with_reader(const std::string &pname,$/;"	f	class:fermat::CmdParser::option_with_value_with_reader
option_with_value_with_reader	src/fermat/common/cmdline.h	/^    class option_with_value_with_reader : public option_with_value<T> {$/;"	c	class:fermat::CmdParser
option_without_value	src/fermat/common/cmdline.h	/^        option_without_value(const std::string &pname,$/;"	f	class:fermat::CmdParser::option_without_value
option_without_value	src/fermat/common/cmdline.h	/^    class option_without_value : public option_base {$/;"	c	class:fermat::CmdParser
options	src/fermat/common/cmdline.h	/^    std::map<std::string, option_base*> options;$/;"	m	class:fermat::CmdParser
ordered	src/fermat/common/cmdline.h	/^    std::vector<option_base*> ordered;$/;"	m	class:fermat::CmdParser
osPrio	src/fermat/common/thread.cc	/^		int                       osPrio;$/;"	m	class:fermat::Thread::ThreadData	file:
os_architecture	src/fermat/common/env.cc	/^std::string Environment::os_architecture()$/;"	f	class:fermat::Environment
os_name	src/fermat/common/env.cc	/^std::string Environment::os_name()$/;"	f	class:fermat::Environment
os_version	src/fermat/common/env.cc	/^std::string Environment::os_version()$/;"	f	class:fermat::Environment
others	src/fermat/common/cmdline.h	/^    std::vector<std::string> others;$/;"	m	class:fermat::CmdParser
overflow	src/fermat/common/format.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fermat::FormatBuf
pRunnableTarget	src/fermat/common/thread.cc	/^		std::shared_ptr<Runnable> pRunnableTarget;$/;"	m	class:fermat::Thread::ThreadData	file:
p_a_g_h_l	src/fermat/common/ascii.cc	/^static const int p_a_g_h_l = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_a_g_h_u	src/fermat/common/ascii.cc	/^static const int p_a_g_h_u = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_a_g_l	src/fermat/common/ascii.cc	/^static const int p_a_g_l = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_a_g_u	src/fermat/common/ascii.cc	/^static const int p_a_g_u = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_p_g	src/fermat/common/ascii.cc	/^static const int p_p_g = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_p_g_d	src/fermat/common/ascii.cc	/^static const int p_p_g_d = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
p_s	src/fermat/common/ascii.cc	/^static const int p_s = static_cast<int>(AsciiType::ePrint) | $/;"	m	namespace:fermat	file:
pad	src/fermat/common/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fermat
pad	src/fermat/common/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fermat
pad	src/fermat/common/numeric_string.cc	/^void pad(std::string& str, size_t precision, size_t width, char prefix = ' ', char decSep = '.')$/;"	f	namespace:fermat::detail
parse	src/fermat/common/cmdline.h	/^    bool parse(const std::string &arg)$/;"	f	class:fermat::CmdParser
parse	src/fermat/common/cmdline.h	/^    bool parse(const std::vector<std::string> &args)$/;"	f	class:fermat::CmdParser
parse	src/fermat/common/cmdline.h	/^    bool parse(int argc, const char * const argv[])$/;"	f	class:fermat::CmdParser
parse_bool	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_bool(const std::string& s, bool& value)$/;"	f	class:fermat::NumberParser
parse_check	src/fermat/common/cmdline.h	/^    void parse_check(const std::string &arg)$/;"	f	class:fermat::CmdParser
parse_check	src/fermat/common/cmdline.h	/^    void parse_check(const std::vector<std::string> &args)$/;"	f	class:fermat::CmdParser
parse_check	src/fermat/common/cmdline.h	/^    void parse_check(int argc, char *argv[])$/;"	f	class:fermat::CmdParser
parse_flags	src/fermat/common/format_in.h	/^void fermat::internal::PrintfFormatter<Char>::parse_flags($/;"	f	class:fermat::internal::PrintfFormatter
parse_float	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_float(const std::string& s, double& value, char decSep, char thSep)$/;"	f	class:fermat::NumberParser
parse_float_si	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_float_si(const std::string &s, double &value)$/;"	f	class:fermat::NumberParser
parse_header	src/fermat/common/format_in.h	/^unsigned fermat::internal::PrintfFormatter<Char>::parse_header($/;"	f	class:fermat::internal::PrintfFormatter
parse_hex	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_hex(const std::string& s, unsigned& value)$/;"	f	class:fermat::NumberParser
parse_hex64	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_hex64(const std::string& s, uint64_t &value)$/;"	f	class:fermat::NumberParser
parse_int	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_int(const std::string& s, int& value, char thSep)$/;"	f	class:fermat::NumberParser
parse_int64	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_int64(const std::string &s, int64_t &value, char thSep)$/;"	f	class:fermat::NumberParser
parse_oct	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_oct(const std::string& s, unsigned& value)$/;"	f	class:fermat::NumberParser
parse_oct64	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_oct64(const std::string& s, uint64_t& value)$/;"	f	class:fermat::NumberParser
parse_uint64	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_uint64(const std::string &s, uint64_t &value, char thSep)$/;"	f	class:fermat::NumberParser
parse_unsigned	src/fermat/common/numeric_parser.cc	/^bool NumberParser::parse_unsigned(const std::string& s, unsigned& value, char thSep)$/;"	f	class:fermat::NumberParser
pointer	src/fermat/common/format.h	/^        const void                 *pointer;$/;"	m	union:fermat::internal::Value::__anon16
policy	src/fermat/common/thread.cc	/^		int                       policy;$/;"	m	class:fermat::Thread::ThreadData	file:
position	src/fermat/common/double-conversion/utils.h	/^  int position() const {$/;"	f	class:double_conversion::StringBuilder
position_	src/fermat/common/double-conversion/utils.h	/^  int position_;$/;"	m	class:double_conversion::StringBuilder
precision	src/fermat/common/format.h	/^    int precision() const$/;"	f	struct:fermat::AlignSpec
precision	src/fermat/common/format.h	/^    int precision() const$/;"	f	struct:fermat::FormatSpec
precision	src/fermat/common/format.h	/^    int precision() const$/;"	f	struct:fermat::TypeSpec
prepare_int_buffer	src/fermat/common/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	src/fermat/common/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
print	src/fermat/common/format_in.h	/^void fermat::print(CStringRef format_str, ArgList args)$/;"	f	class:fermat
print	src/fermat/common/format_in.h	/^void fermat::print(std::FILE *f, CStringRef format_str, ArgList args)$/;"	f	class:fermat
print	src/fermat/common/format_in.h	/^void fermat::print(std::ostream &os, CStringRef format_str,$/;"	f	class:fermat
print_colored	src/fermat/common/format_in.h	/^void fermat::print_colored(Color c, CStringRef format, ArgList args)$/;"	f	class:fermat
printf	src/fermat/common/format.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f
printf	src/fermat/common/format.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f
prio	src/fermat/common/thread.cc	/^		int                       prio;$/;"	m	class:fermat::Thread::ThreadData	file:
processor_count	src/fermat/common/env.cc	/^int Environment::processor_count()$/;"	f	class:fermat::Environment
prog_name	src/fermat/common/cmdline.h	/^    std::string prog_name;$/;"	m	class:fermat::CmdParser
properties	src/fermat/common/ascii.h	/^inline int Ascii::properties(int c)$/;"	f	class:fermat::AsciiType::Ascii
push_back	src/fermat/common/basic_buffer.h	/^    void push_back(const T &value)$/;"	f	class:fermat::BasicBuffer
puts	src/fermat/common/log_async.cc	/^void LogAsync::puts(const char* line, size_t len)$/;"	f	class:fermat::LogAsync
puts	src/fermat/common/logging.cc	/^    virtual void puts(const char* buf, size_t len)$/;"	f	class:fermat::DefaultOutPut
range	src/fermat/common/cmdline.h	/^range_reader<T> range(const T &low, const T &high)$/;"	f	namespace:fermat
range_reader	src/fermat/common/cmdline.h	/^    range_reader(const T &low, const T &high): _low(low), _high(high) {}$/;"	f	struct:fermat::range_reader
range_reader	src/fermat/common/cmdline.h	/^struct range_reader{$/;"	s	namespace:fermat
ratio	src/fermat/common/clock.h	/^inline Clock::ClockDiff Clock::ratio()$/;"	f	class:fermat::Clock
ratio	src/fermat/common/stop_watcher.h	/^inline Clock::ClockVal StopWatcher::ratio()$/;"	f	class:fermat::StopWatcher
ratio	src/fermat/common/timestamp.h	/^inline Timestamp::TimeDiff Timestamp::ratio()$/;"	f	class:fermat::Timestamp
raw	src/fermat/common/clock.h	/^inline Clock::ClockVal Clock::raw() const$/;"	f	class:fermat::Clock
read	src/fermat/common/cmdline.h	/^        T read(const std::string &s)$/;"	f	class:fermat::CmdParser::option_with_value_with_reader
readable_typename	src/fermat/common/cmdline.h	/^inline std::string readable_typename<std::string>()$/;"	f	namespace:fermat::detail
readable_typename	src/fermat/common/cmdline.h	/^std::string readable_typename()$/;"	f	namespace:fermat::detail
reader	src/fermat/common/cmdline.h	/^        F reader;$/;"	m	class:fermat::CmdParser::option_with_value_with_reader
remove	src/fermat/common/string.h	/^S remove(const S& str, const typename S::value_type ch, typename S::size_type start = 0)$/;"	f	namespace:fermat
remove_in_place	src/fermat/common/string.h	/^S& remove_in_place(S& str, const typename S::value_type ch, typename S::size_type start = 0)$/;"	f	namespace:fermat
remove_prefix	src/fermat/common/string_ref.h	/^    void remove_prefix(size_t n) $/;"	f	class:fermat::BasicStringRef
replace	src/fermat/common/string.h	/^S replace(const S& str, const S& from, const S& to, typename S::size_type start = 0)$/;"	f	namespace:fermat
replace	src/fermat/common/string.h	/^S replace(const S& str, const typename S::value_type from, const typename S::value_type to = 0, typename S::size_type start = 0)$/;"	f	namespace:fermat
replace	src/fermat/common/string.h	/^S replace(const S& str, const typename S::value_type* from, const typename S::value_type* to, typename S::size_type start = 0)$/;"	f	namespace:fermat
replace_in_place	src/fermat/common/string.h	/^S& replace_in_place(S& str, const S& from, const S& to, typename S::size_type start = 0)$/;"	f	namespace:fermat
replace_in_place	src/fermat/common/string.h	/^S& replace_in_place(S& str, const typename S::value_type from, const typename S::value_type to = 0, typename S::size_type start = 0)$/;"	f	namespace:fermat
replace_in_place	src/fermat/common/string.h	/^S& replace_in_place(S& str, const typename S::value_type* from, const typename S::value_type* to, typename S::size_type start = 0)$/;"	f	namespace:fermat
report_unhandled_arg	src/fermat/common/format.h	/^    void report_unhandled_arg()$/;"	f	class:fermat::internal::ArgVisitor
report_unhandled_arg	src/fermat/common/format_in.h	/^    void report_unhandled_arg()$/;"	f	class:fermat::__anon29::PrecisionHandler
report_unhandled_arg	src/fermat/common/format_in.h	/^    void report_unhandled_arg()$/;"	f	class:fermat::__anon29::WidthHandler
report_unknown_type	src/fermat/common/format_in.h	/^void fermat::internal::report_unknown_type(char code, const char *type)$/;"	f	class:fermat::internal
reserve	src/fermat/common/basic_buffer.h	/^    void reserve(std::size_t capacitySize)$/;"	f	class:fermat::BasicBuffer
reset	src/fermat/common/stop_wathcer.cc	/^void StopWatcher::reset()$/;"	f	class:fermat::StopWatcher
reset_bufffer	src/fermat/common/log_stream.h	/^    void reset_bufffer() { _buffer.clear(); }$/;"	f	class:fermat::LogStream
resize	src/fermat/common/basic_buffer.h	/^    void resize(std::size_t new_size)$/;"	f	class:fermat::BasicBuffer
rest	src/fermat/common/cmdline.h	/^    const std::vector<std::string> &rest() const $/;"	f	class:fermat::CmdParser
restart	src/fermat/common/stop_wathcer.cc	/^void StopWatcher::restart()$/;"	f	class:fermat::StopWatcher
roll	src/fermat/common/log_file.h	/^inline bool LogFile<MUTEX>::roll()$/;"	f	class:fermat::LogFile
run	src/fermat/common/log_async.cc	/^void LogAsync::run()$/;"	f	class:fermat::LogAsync
run	src/fermat/common/thread.cc	/^		void run()$/;"	f	class:fermat::FunctorRunnable
run_test	tests/common/log_test.cc	/^fermat::Timespan run_test()$/;"	f
runner	tests/common/log_test.cc	/^void runner()$/;"	f
seconds	src/fermat/common/timespan.h	/^inline int Timespan::seconds() const$/;"	f	class:fermat::Timespan
seconds	src/fermat/common/timestamp.h	/^inline std::time_t Timestamp::seconds() const$/;"	f	class:fermat::Timestamp
self	src/fermat/common/log_stream.h	/^    typedef LogStream self;$/;"	t	class:fermat::LogStream
set	src/fermat/common/cmdline.h	/^        bool set()$/;"	f	class:fermat::CmdParser::option_with_value
set	src/fermat/common/cmdline.h	/^        bool set()$/;"	f	class:fermat::CmdParser::option_without_value
set	src/fermat/common/cmdline.h	/^        bool set(const std::string &)$/;"	f	class:fermat::CmdParser::option_without_value
set	src/fermat/common/cmdline.h	/^        bool set(const std::string &value)$/;"	f	class:fermat::CmdParser::option_with_value
set	src/fermat/common/env.cc	/^bool Environment::set(const std::string& name, const std::string& value)$/;"	f	class:fermat::Environment
set_affinity	src/fermat/common/thread.cc	/^bool Thread::set_affinity(int cpu)$/;"	f	class:fermat::Thread
set_e	src/fermat/common/double-conversion/diy-fp.h	/^  void set_e(int new_value) { e_ = new_value; }$/;"	f	class:double_conversion::DiyFp
set_f	src/fermat/common/double-conversion/diy-fp.h	/^  void set_f(uint64_t new_value) { f_ = new_value; }$/;"	f	class:double_conversion::DiyFp
set_log_level	src/fermat/common/logging.cc	/^void Logging::set_log_level(Logging::LogLevel level)$/;"	f	class:fermat::Logging
set_name	src/fermat/common/thread.cc	/^void Thread::set_name(const std::string& rName)$/;"	f	class:fermat::Thread
set_option	src/fermat/common/cmdline.h	/^    void set_option(const std::string &name)$/;"	f	class:fermat::CmdParser
set_option	src/fermat/common/cmdline.h	/^    void set_option(const std::string &name, const std::string &value)$/;"	f	class:fermat::CmdParser
set_os_priority	src/fermat/common/thread.cc	/^bool Thread::set_os_priority(int prio, int policy)$/;"	f	class:fermat::Thread
set_output	src/fermat/common/logging.cc	/^void Logging::set_output(LogOutputPtr &out)$/;"	f	class:fermat::Logging
set_priority	src/fermat/common/thread.cc	/^bool Thread::set_priority(Priority prio)$/;"	f	class:fermat::Thread
set_program_name	src/fermat/common/cmdline.h	/^    void set_program_name(const std::string &name)$/;"	f	class:fermat::CmdParser
set_string	src/fermat/common/format.h	/^    void set_string(StringRef str)$/;"	f	class:fermat::internal::MakeValue
set_string	src/fermat/common/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fermat::internal::MakeValue
set_thread_name	src/fermat/common/this_thread.cc	/^void set_thread_name(pthread_t thread, const std::string &threadName)$/;"	f	namespace:fermat::this_thread
set_to	src/fermat/common/shared_state.h	/^	void set_to(const T&value)$/;"	f	class:fermat::SharedState
short_description	src/fermat/common/cmdline.h	/^        std::string short_description() const$/;"	f	class:fermat::CmdParser::option_with_value
short_description	src/fermat/common/cmdline.h	/^        std::string short_description() const$/;"	f	class:fermat::CmdParser::option_without_value
short_name	src/fermat/common/cmdline.h	/^        char short_name() const$/;"	f	class:fermat::CmdParser::option_with_value
short_name	src/fermat/common/cmdline.h	/^        char short_name() const$/;"	f	class:fermat::CmdParser::option_without_value
signal	src/fermat/common/cond.cc	/^void Cond::signal() $/;"	f	class:fermat::Cond
signbit	src/fermat/common/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fermat::internal
significand	src/fermat/common/double-conversion/cached-powers.cc	/^  uint64_t significand;$/;"	m	struct:double_conversion::CachedPower	file:
size	src/fermat/common/basic_buffer.h	/^    std::size_t size() const$/;"	f	class:fermat::BasicBuffer
size	src/fermat/common/double-conversion/utils.h	/^  int size() const { return buffer_.length(); }$/;"	f	class:double_conversion::StringBuilder
size	src/fermat/common/format.h	/^        std::size_t size;$/;"	m	struct:fermat::internal::Value::StringValue
size	src/fermat/common/format.h	/^    size_t size() const$/;"	f	class:fermat::FormatBuf
size	src/fermat/common/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	src/fermat/common/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	src/fermat/common/string_ref.h	/^    std::size_t size() const$/;"	f	class:fermat::BasicStringRef
sleep_for	src/fermat/common/this_thread.cc	/^bool sleep_for(Timespan span)$/;"	f	namespace:fermat::this_thread
sleep_until	src/fermat/common/this_thread.cc	/^bool sleep_until(Timestamp stamp)$/;"	f	namespace:fermat::this_thread
span	src/fermat/common/numeric_string.h	/^		size_t span() const$/;"	f	class:fermat::Impl::Ptr
spec	src/fermat/common/format.h	/^    FormatSpec &spec()$/;"	f	class:fermat::internal::ArgFormatterBase
sprintf	src/fermat/common/format.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f
sprintf	src/fermat/common/format.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f
sstring	src/fermat/common/format.h	/^        StringValue<signed char>    sstring;$/;"	m	union:fermat::internal::Value::__anon16
stackSize	src/fermat/common/thread.cc	/^		std::size_t               stackSize;$/;"	m	class:fermat::Thread::ThreadData	file:
stack_size	src/fermat/common/stack_buffer.h	/^    size_t stack_size() const$/;"	f	class:fermat::StackBuffer
start	src/fermat/common/double-conversion/utils.h	/^  T* start() const { return start_; }$/;"	f	class:double_conversion::Vector
start	src/fermat/common/log_async.cc	/^bool LogAsync::start()$/;"	f	class:fermat::LogAsync
start	src/fermat/common/stop_watcher.h	/^inline void StopWatcher::start()$/;"	f	class:fermat::StopWatcher
start	src/fermat/common/thread.cc	/^bool Thread::start(const RunnablePtr& target)$/;"	f	class:fermat::Thread
start	src/fermat/common/thread.cc	/^bool Thread::start(const ThreadFactor &fn)	$/;"	f	class:fermat::Thread
start_	src/fermat/common/double-conversion/utils.h	/^  T* start_;$/;"	m	class:double_conversion::Vector
started	src/fermat/common/thread.cc	/^		bool                      started;$/;"	m	class:fermat::Thread::ThreadData	file:
starts_with	src/fermat/common/string_ref.h	/^    bool starts_with(const BasicStringRef<Char>& x) const $/;"	f	class:fermat::BasicStringRef
std	src/fermat/common/format.h	/^namespace std$/;"	n
stop	src/fermat/common/log_async.cc	/^void LogAsync::stop()$/;"	f	class:fermat::LogAsync
stop	src/fermat/common/stop_watcher.h	/^inline void StopWatcher::stop()$/;"	f	class:fermat::StopWatcher
str	src/fermat/common/format.h	/^    const Char *str() const$/;"	f	class:fermat::StrFormatSpec
str	src/fermat/common/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	src/fermat/common/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str_to_double	src/fermat/common/numeric_string.cc	/^bool str_to_double(const std::string& str, double& result, char decSep, char thSep)$/;"	f	namespace:fermat
str_to_double	src/fermat/common/numeric_string.cc	/^double str_to_double(const char* str)$/;"	f	namespace:fermat
str_to_float	src/fermat/common/numeric_string.cc	/^bool str_to_float(const std::string& str, float& result, char decSep, char thSep)$/;"	f	namespace:fermat
str_to_float	src/fermat/common/numeric_string.cc	/^float str_to_float(const char* str)$/;"	f	namespace:fermat
str_to_int	src/fermat/common/numeric_string.h	/^bool str_to_int(const char* pStr, I& result, short base, char thSep = ',')$/;"	f	namespace:fermat
str_to_int	src/fermat/common/numeric_string.h	/^bool str_to_int(const std::string& str, I& result, short base, char thSep = ',')$/;"	f	namespace:fermat
stream	src/fermat/common/logging.h	/^    LogStream& stream() { return _impl._stream; }$/;"	f	class:fermat::Logging
strerror_r	src/fermat/common/format_in.h	/^static inline fermat::internal::Null<> strerror_r(int, char *, ...)$/;"	f
strerror_s	src/fermat/common/format_in.h	/^static inline fermat::internal::Null<> strerror_s(char *, std::size_t, ...)$/;"	f
strerror_tl	src/fermat/common/logging.cc	/^const char* strerror_tl(int savedErrno)$/;"	f	namespace:fermat
string	src/fermat/common/format.h	/^        StringValue<char>           string;$/;"	m	union:fermat::internal::Value::__anon16
swap	src/fermat/common/clock.cc	/^void Clock::swap(Clock& timestamp)$/;"	f	class:fermat::Clock
swap	src/fermat/common/clock.h	/^inline void swap(Clock& s1, Clock& s2)$/;"	f	namespace:fermat
swap	src/fermat/common/timespan.h	/^inline void Timespan::swap(Timespan &other)$/;"	f	class:fermat::Timespan
swap	src/fermat/common/timespan.h	/^inline void swap(Timespan &t1, Timespan &t2)$/;"	f	namespace:fermat
swap	src/fermat/common/timestamp.cc	/^void Timestamp::swap(Timestamp &other)$/;"	f	class:fermat::Timestamp
t_errnobuf	src/fermat/common/logging.cc	/^__thread char t_errnobuf[512];$/;"	m	namespace:fermat	file:
t_lastSecond	src/fermat/common/logging.cc	/^__thread time_t t_lastSecond;$/;"	m	namespace:fermat	file:
t_tid	src/fermat/common/this_thread.cc	/^__thread pid_t t_tid = 0;$/;"	m	namespace:fermat::this_thread	file:
t_tid_string	src/fermat/common/this_thread.cc	/^__thread char  t_tid_string[32] = "";$/;"	m	namespace:fermat::this_thread	file:
t_tid_string_len	src/fermat/common/this_thread.cc	/^__thread char  t_tid_string_len = 0;	$/;"	m	namespace:fermat::this_thread	file:
t_time	src/fermat/common/logging.cc	/^__thread char t_time[32];$/;"	m	namespace:fermat	file:
this_thread	src/fermat/common/this_thread.cc	/^namespace this_thread{$/;"	n	namespace:fermat	file:
this_thread	src/fermat/common/this_thread.h	/^namespace this_thread {$/;"	n	namespace:fermat
thousand_separator	src/fermat/common/numeric_string.h	/^inline char thousand_separator()$/;"	f	namespace:fermat
thread	src/fermat/common/thread.cc	/^		pthread_t                 thread;$/;"	m	class:fermat::Thread::ThreadData	file:
thread_fuction	src/fermat/common/thread.cc	/^void* Thread::thread_fuction(void *data)$/;"	f	class:fermat::Thread
thread_id	src/fermat/common/this_thread.h	/^inline pid_t thread_id()$/;"	f	namespace:fermat::this_thread
thread_id_string	src/fermat/common/this_thread.h	/^inline const char* thread_id_string()$/;"	f	namespace:fermat::this_thread
thread_id_string_length	src/fermat/common/this_thread.h	/^inline int thread_id_string_length()$/;"	f	namespace:fermat::this_thread
thread_number	tests/common/log_test.cc	/^static int thread_number = 0;$/;"	v	file:
tid	src/fermat/common/thread.cc	/^		pid_t                     tid;$/;"	m	class:fermat::Thread::ThreadData	file:
tid	src/fermat/common/thread.cc	/^Thread::TID Thread::tid() const$/;"	f	class:fermat::Thread
to_lower	src/fermat/common/ascii.h	/^inline int Ascii::to_lower(int ch)$/;"	f	class:fermat::AsciiType::Ascii
to_lower	src/fermat/common/string.h	/^S to_lower(const S& str)$/;"	f	namespace:fermat
to_lower_in_place	src/fermat/common/string.h	/^S& to_lower_in_place(S& str)	$/;"	f	namespace:fermat
to_string	src/fermat/common/string_ref.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fermat::BasicStringRef
to_unsigned	src/fermat/common/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fermat::internal
to_upper	src/fermat/common/ascii.h	/^inline int Ascii::to_upper(int character)$/;"	f	class:fermat::AsciiType::Ascii
to_upper	src/fermat/common/string.h	/^S to_upper(const S& str)$/;"	f	namespace:fermat
to_upper_in_place	src/fermat/common/string.h	/^S& to_upper_in_place(S& str)$/;"	f	namespace:fermat
total_hours	src/fermat/common/timespan.h	/^inline int Timespan::total_hours() const$/;"	f	class:fermat::Timespan
total_micro_seconds	src/fermat/common/timespan.h	/^inline  Timespan::TimeDiff Timespan::total_micro_seconds() const$/;"	f	class:fermat::Timespan
total_micro_seconds	src/fermat/common/timestamp.h	/^inline Timestamp::TimeVal Timestamp::total_micro_seconds() const$/;"	f	class:fermat::Timestamp
total_mill_seconds	src/fermat/common/timespan.h	/^inline Timespan::TimeDiff Timespan::total_mill_seconds() const$/;"	f	class:fermat::Timespan
total_mill_seconds	src/fermat/common/timestamp.h	/^inline Timestamp::TimeVal Timestamp::total_mill_seconds() const$/;"	f	class:fermat::Timestamp
total_minutes	src/fermat/common/timespan.h	/^inline int Timespan::total_minutes() const $/;"	f	class:fermat::Timespan
total_seconds	src/fermat/common/timespan.h	/^inline int Timespan::total_seconds() const $/;"	f	class:fermat::Timespan
traits_type	src/fermat/common/format.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fermat::FormatBuf
translate	src/fermat/common/string.h	/^S translate(const S& str, const S& from, const S& to)$/;"	f	namespace:fermat
translate	src/fermat/common/string.h	/^S translate(const S& str, const typename S::value_type* from, const typename S::value_type* to)$/;"	f	namespace:fermat
translate_in_place	src/fermat/common/string.h	/^S translate_in_place(S& str, const typename S::value_type* from, const typename S::value_type* to)$/;"	f	namespace:fermat
translate_in_place	src/fermat/common/string.h	/^S& translate_in_place(S& str, const S& from, const S& to)$/;"	f	namespace:fermat
trim	src/fermat/common/string.h	/^S trim(const S& str)$/;"	f	namespace:fermat
trim_in_place	src/fermat/common/string.h	/^S& trim_in_place(S& str)$/;"	f	namespace:fermat
trim_left	src/fermat/common/string.h	/^S trim_left(const S& str)$/;"	f	namespace:fermat
trim_left_in_place	src/fermat/common/string.h	/^S& trim_left_in_place(S& str)$/;"	f	namespace:fermat
trim_right	src/fermat/common/string.h	/^S trim_right(const S& str)$/;"	f	namespace:fermat
trim_right_in_place	src/fermat/common/string.h	/^S& trim_right_in_place(S& str)$/;"	f	namespace:fermat
try_sleep	src/fermat/common/thread.cc	/^bool Thread::try_sleep(Timespan span)$/;"	f	class:fermat::Thread
type	src/fermat/common/format.h	/^    Type type;$/;"	m	struct:fermat::internal::Arg
type	src/fermat/common/format.h	/^    char type() const$/;"	f	struct:fermat::AlignTypeSpec
type	src/fermat/common/format.h	/^    char type() const$/;"	f	struct:fermat::FormatSpec
type	src/fermat/common/format.h	/^    char type() const$/;"	f	struct:fermat::TypeSpec
type	src/fermat/common/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fermat::ArgList
type	src/fermat/common/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fermat::internal::MakeValue
type	src/fermat/common/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fermat::internal::MakeValue
type	src/fermat/common/format.h	/^    static uint64_t type(long)$/;"	f	class:fermat::internal::MakeValue
type	src/fermat/common/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fermat::internal::MakeValue
type	src/fermat/common/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fermat::internal::MakeValue
type	src/fermat/common/format.h	/^    typedef F type;$/;"	t	struct:fermat::internal::Conditional
type	src/fermat/common/format.h	/^    typedef T type;$/;"	t	struct:fermat::internal::Conditional
type	src/fermat/common/format.h	/^    typedef T type;$/;"	t	struct:fermat::internal::EnableIf
type	src/fermat/common/format.h	/^    uint64_t type;$/;"	m	struct:fermat::ArgType
type	tests/common/log_test.cc	/^static std::string type;$/;"	v	file:
uc16	src/fermat/common/double-conversion/utils.h	/^typedef uint16_t uc16;$/;"	t
uint16_t	src/fermat/common/double-conversion/utils.h	/^typedef unsigned short uint16_t;  \/\/ NOLINT$/;"	t
uint32_t	src/fermat/common/double-conversion/utils.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_to_float	src/fermat/common/double-conversion/ieee.h	/^static float uint32_to_float(uint32_t d32) { return BitCast<float>(d32); }$/;"	f	namespace:double_conversion
uint64_t	src/fermat/common/double-conversion/utils.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_to_double	src/fermat/common/double-conversion/ieee.h	/^static double uint64_to_double(uint64_t d64) { return BitCast<double>(d64); }$/;"	f	namespace:double_conversion
uint8_t	src/fermat/common/double-conversion/utils.h	/^typedef unsigned char uint8_t;$/;"	t
uint_to_str	src/fermat/common/numeric_string.h	/^bool uint_to_str (T number, unsigned short base, std::string& result, bool prefix = false, int width = -1, char fill = ' ', char thSep = 0)$/;"	f	namespace:fermat
uint_to_str	src/fermat/common/numeric_string.h	/^bool uint_to_str(T value,$/;"	f	namespace:fermat
uint_value	src/fermat/common/format.h	/^        unsigned                    uint_value;$/;"	m	union:fermat::internal::Value::__anon16
ulong_long_value	src/fermat/common/format.h	/^        ULongLong                   ulong_long_value;$/;"	m	union:fermat::internal::Value::__anon16
unique_id	src/fermat/common/thread.cc	/^int Thread::unique_id()$/;"	f	class:fermat::Thread
unlock	src/fermat/common/mutex.cc	/^void Mutex::unlock()$/;"	f	class:fermat::Mutex
unlock	src/fermat/common/mutex.cc	/^void TimedMutex::unlock()$/;"	f	class:fermat::TimedMutex
unlock	src/fermat/common/mutex.h	/^    void unlock()$/;"	f	class:fermat::UniqueLock
unlock	src/fermat/common/mutex.h	/^    void unlock(){ }$/;"	f	class:fermat::NullMutex
unlock_write	src/fermat/common/sequence_write_file.cc	/^size_t SequenceWriteFile::unlock_write(const char* content, const size_t len)$/;"	f	class:fermat::SequenceWriteFile
update	src/fermat/common/clock.cc	/^void Clock::update()$/;"	f	class:fermat::Clock
update	src/fermat/common/timestamp.cc	/^void Timestamp::update()$/;"	f	class:fermat::Timestamp
usage	src/fermat/common/cmdline.h	/^    std::string usage() const$/;"	f	class:fermat::CmdParser
used_digits_	src/fermat/common/double-conversion/bignum.h	/^  int used_digits_;$/;"	m	class:double_conversion::Bignum
ustring	src/fermat/common/format.h	/^        StringValue<unsigned char>  ustring;$/;"	m	union:fermat::internal::Value::__anon16
utc_time	src/fermat/common/timestamp.h	/^inline Timestamp::UtcTimeVal Timestamp::utc_time() const$/;"	f	class:fermat::Timestamp
valid	src/fermat/common/cmdline.h	/^        bool valid() const$/;"	f	class:fermat::CmdParser::option_without_value
valid	src/fermat/common/cmdline.h	/^        bool valid() const{$/;"	f	class:fermat::CmdParser::option_with_value
value	src/fermat/common/double-conversion/ieee.h	/^  double value() const { return uint64_to_double(d64_); }$/;"	f	class:double_conversion::Double
value	src/fermat/common/double-conversion/ieee.h	/^  float value() const { return uint32_to_float(d32_); }$/;"	f	class:double_conversion::Single
value	src/fermat/common/format.h	/^        const Char *value;$/;"	m	struct:fermat::internal::Value::StringValue
value	src/fermat/common/format.h	/^        const void *value;$/;"	m	struct:fermat::internal::Value::CustomValue
value	src/fermat/common/format.h	/^        value = 0$/;"	e	enum:fermat::internal::Not::__anon23
value	src/fermat/common/format.h	/^        value = 1$/;"	e	enum:fermat::internal::Not::__anon24
value	src/fermat/common/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fermat::internal::ConvertToInt::__anon22
value	src/fermat/common/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fermat::internal::ConvertToIntImpl2::__anon20
value	src/fermat/common/format.h	/^        value = false$/;"	e	enum:fermat::internal::ConvertToIntImpl2::__anon19
value	src/fermat/common/format.h	/^        value = false$/;"	e	enum:fermat::internal::ConvertToIntImpl::__anon17
value	src/fermat/common/format.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fermat::internal::ConvertToIntImpl::__anon18
value	src/fermat/common/format.h	/^    T value() const$/;"	f	class:fermat::IntFormatSpec
value	src/fermat/common/format_in.h	/^        value = 0$/;"	e	enum:fermat::__anon29::is_same::__anon30
value	src/fermat/common/format_in.h	/^        value = 1$/;"	e	enum:fermat::__anon29::is_same::__anon31
value_type	src/fermat/common/shared_state.h	/^	typedef T value_type;$/;"	t	class:fermat::SharedState
visit	src/fermat/common/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fermat::internal::ArgVisitor
visit_any_double	src/fermat/common/format.h	/^    Result visit_any_double(T)$/;"	f	class:fermat::internal::ArgVisitor
visit_any_double	src/fermat/common/format.h	/^    void visit_any_double(T value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_any_int	src/fermat/common/format.h	/^    Result visit_any_int(T)$/;"	f	class:fermat::internal::ArgVisitor
visit_any_int	src/fermat/common/format.h	/^    void visit_any_int(T value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_any_int	src/fermat/common/format_in.h	/^    bool visit_any_int(T value)$/;"	f	class:fermat::__anon29::IsZeroInt
visit_any_int	src/fermat/common/format_in.h	/^    int visit_any_int(T value)$/;"	f	class:fermat::__anon29::PrecisionHandler
visit_any_int	src/fermat/common/format_in.h	/^    unsigned visit_any_int(T value)$/;"	f	class:fermat::__anon29::WidthHandler
visit_any_int	src/fermat/common/format_in.h	/^    void visit_any_int(T value)$/;"	f	class:fermat::__anon29::CharConverter
visit_any_int	src/fermat/common/format_in.h	/^    void visit_any_int(U value)$/;"	f	class:fermat::__anon29::ArgConverter
visit_bool	src/fermat/common/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fermat::internal::ArgVisitor
visit_bool	src/fermat/common/format.h	/^    void visit_bool(bool value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_bool	src/fermat/common/format_in.h	/^    void visit_bool(bool value)$/;"	f	class:fermat::__anon29::ArgConverter
visit_bool	src/fermat/common/format_in.h	/^    void visit_bool(bool value)$/;"	f	class:fermat::internal::PrintfArgFormatter
visit_char	src/fermat/common/format.h	/^    Result visit_char(int value)$/;"	f	class:fermat::internal::ArgVisitor
visit_char	src/fermat/common/format.h	/^    void visit_char(int value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_char	src/fermat/common/format_in.h	/^    void visit_char(int value)$/;"	f	class:fermat::internal::PrintfArgFormatter
visit_cstring	src/fermat/common/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fermat::internal::ArgVisitor
visit_cstring	src/fermat/common/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_cstring	src/fermat/common/format_in.h	/^    void visit_cstring(const char *value)$/;"	f	class:fermat::internal::PrintfArgFormatter
visit_custom	src/fermat/common/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fermat::internal::ArgVisitor
visit_custom	src/fermat/common/format.h	/^    void visit_custom(Arg::CustomValue c)$/;"	f	class:fermat::internal::BasicArgFormatter
visit_custom	src/fermat/common/format_in.h	/^    void visit_custom(Arg::CustomValue c)$/;"	f	class:fermat::internal::PrintfArgFormatter
visit_double	src/fermat/common/format.h	/^    Result visit_double(double value)$/;"	f	class:fermat::internal::ArgVisitor
visit_int	src/fermat/common/format.h	/^    Result visit_int(int value)$/;"	f	class:fermat::internal::ArgVisitor
visit_long_double	src/fermat/common/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fermat::internal::ArgVisitor
visit_long_long	src/fermat/common/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fermat::internal::ArgVisitor
visit_pointer	src/fermat/common/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fermat::internal::ArgVisitor
visit_pointer	src/fermat/common/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_pointer	src/fermat/common/format_in.h	/^    void visit_pointer(const void *value)$/;"	f	class:fermat::internal::PrintfArgFormatter
visit_string	src/fermat/common/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fermat::internal::ArgVisitor
visit_string	src/fermat/common/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fermat::internal::ArgFormatterBase
visit_uint	src/fermat/common/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fermat::internal::ArgVisitor
visit_ulong_long	src/fermat/common/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fermat::internal::ArgVisitor
visit_unhandled_arg	src/fermat/common/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fermat::internal::ArgVisitor
visit_wstring	src/fermat/common/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fermat::internal::ArgVisitor
visit_wstring	src/fermat/common/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fermat::internal::ArgFormatterBase
volatile_instance_pointer	src/fermat/common/singleton.h	/^    typedef volatile instance_pointer volatile_instance_pointer;$/;"	t	class:fermat::Singleton
wait	src/fermat/common/cond.cc	/^bool Cond::wait(Mutex& mutex, Timespan span)$/;"	f	class:fermat::Cond
wait	src/fermat/common/cond.cc	/^void Cond::wait(Mutex& mutex)$/;"	f	class:fermat::Cond
wait_for	src/fermat/common/shared_state.h	/^	bool wait_for(const T &condition, Timespan span)$/;"	f	class:fermat::SharedState
wait_for	src/fermat/common/shared_state.h	/^	void wait_for(const T &condition)$/;"	f	class:fermat::SharedState
wake_up	src/fermat/common/thread.cc	/^void Thread::wake_up()$/;"	f	class:fermat::Thread
what	src/fermat/common/cmdline.h	/^    const char *what() const throw() { return _msg.c_str(); }$/;"	f	class:fermat::cmdline_error
width	src/fermat/common/format.h	/^    unsigned width() const$/;"	f	struct:fermat::TypeSpec
width	src/fermat/common/format.h	/^    unsigned width() const$/;"	f	struct:fermat::WidthSpec
write	src/fermat/common/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	src/fermat/common/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fermat::internal::FormatterBase
write	src/fermat/common/format.h	/^    void write(bool value)$/;"	f	class:fermat::internal::ArgFormatterBase
write	src/fermat/common/format.h	/^    void write(const char *value)$/;"	f	class:fermat::internal::ArgFormatterBase
write	src/fermat/common/format_in.h	/^void write(std::ostream &os, fermat::Writer &w)$/;"	f	namespace:fermat::__anon29
write_decimal	src/fermat/common/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_double	src/fermat/common/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_int	src/fermat/common/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_null_pointer	src/fermat/common/format_in.h	/^    void write_null_pointer()$/;"	f	class:fermat::internal::PrintfArgFormatter
write_pointer	src/fermat/common/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fermat::internal::ArgFormatterBase
write_size	src/fermat/common/sequence_write_file.cc	/^size_t SequenceWriteFile::write_size()$/;"	f	class:fermat::SequenceWriteFile
write_str	src/fermat/common/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	src/fermat/common/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_unsigned_decimal	src/fermat/common/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
writer	src/fermat/common/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fermat::BasicFormatter
writer	src/fermat/common/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fermat::internal::ArgFormatterBase
wstring	src/fermat/common/format.h	/^        StringValue<wchar_t>        wstring;$/;"	m	union:fermat::internal::Value::__anon16
yield	src/fermat/common/this_thread.cc	/^void yield()$/;"	f	namespace:fermat::this_thread
~BasicBuffer	src/fermat/common/basic_buffer.h	/^    virtual ~BasicBuffer()$/;"	f	class:fermat::BasicBuffer
~BasicWriter	src/fermat/common/format.h	/^    virtual ~BasicWriter()$/;"	f	class:BasicWriter
~Clock	src/fermat/common/clock.cc	/^Clock::~Clock()$/;"	f	class:fermat::Clock
~CmdParser	src/fermat/common/cmdline.h	/^    ~CmdParser()$/;"	f	class:fermat::CmdParser
~Cond	src/fermat/common/cond.cc	/^Cond::~Cond()$/;"	f	class:fermat::Cond
~DefaultOutPut	src/fermat/common/logging.cc	/^    ~DefaultOutPut() {}$/;"	f	class:fermat::DefaultOutPut
~FunctorRunnable	src/fermat/common/thread.cc	/^		~FunctorRunnable()$/;"	f	class:fermat::FunctorRunnable
~LogAsync	src/fermat/common/log_async.cc	/^LogAsync::~LogAsync()$/;"	f	class:fermat::LogAsync
~LogFile	src/fermat/common/log_file.h	/^inline LogFile<MUTEX>::~LogFile()$/;"	f	class:fermat::LogFile
~LogOutput	src/fermat/common/logging.h	/^    virtual ~LogOutput(){}$/;"	f	class:fermat::LogOutput
~LogStream	src/fermat/common/log_stream.h	/^    ~LogStream(){}$/;"	f	class:fermat::LogStream
~Logging	src/fermat/common/logging.cc	/^Logging::~Logging()$/;"	f	class:fermat::Logging
~Mutex	src/fermat/common/mutex.cc	/^Mutex::~Mutex() $/;"	f	class:fermat::Mutex
~NullMutex	src/fermat/common/mutex.h	/^    ~NullMutex() { }$/;"	f	class:fermat::NullMutex
~Runnable	src/fermat/common/runnable.cc	/^Runnable::~Runnable()$/;"	f	class:fermat::Runnable
~ScopedLock	src/fermat/common/mutex.h	/^    ~ScopedLock()$/;"	f	class:fermat::ScopedLock
~SequenceWriteFile	src/fermat/common/sequence_write_file.cc	/^SequenceWriteFile::~SequenceWriteFile()$/;"	f	class:fermat::SequenceWriteFile
~StackBuffer	src/fermat/common/stack_buffer.h	/^    ~StackBuffer()$/;"	f	class:fermat::StackBuffer
~StopWatcher	src/fermat/common/stop_wathcer.cc	/^StopWatcher::~StopWatcher()$/;"	f	class:fermat::StopWatcher
~StringBuilder	src/fermat/common/double-conversion/utils.h	/^  ~StringBuilder() { if (!is_finalized()) Finalize(); }$/;"	f	class:double_conversion::StringBuilder
~Thread	src/fermat/common/thread.cc	/^Thread::~Thread()$/;"	f	class:fermat::Thread
~Timespan	src/fermat/common/timespan.cc	/^Timespan::~Timespan()$/;"	f	class:fermat::Timespan
~Timestamp	src/fermat/common/timestamp.cc	/^Timestamp::~Timestamp()$/;"	f	class:fermat::Timestamp
~UniqueLock	src/fermat/common/mutex.h	/^    ~UniqueLock()$/;"	f	class:fermat::UniqueLock
~cmdline_error	src/fermat/common/cmdline.h	/^    ~cmdline_error() throw() {}$/;"	f	class:fermat::cmdline_error
~option_base	src/fermat/common/cmdline.h	/^        virtual ~option_base(){}$/;"	f	class:fermat::CmdParser::option_base
~option_with_value	src/fermat/common/cmdline.h	/^        ~option_with_value(){}$/;"	f	class:fermat::CmdParser::option_with_value
~option_without_value	src/fermat/common/cmdline.h	/^        ~option_without_value(){}$/;"	f	class:fermat::CmdParser::option_without_value
